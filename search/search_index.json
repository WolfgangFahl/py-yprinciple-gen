{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"py-yprinciple-gen API Documentation","text":""},{"location":"#yprinciple.genapi","title":"<code>genapi</code>","text":"<p>Created on 2023-01-30</p> <p>@author: wf</p>"},{"location":"#yprinciple.genapi.GeneratorAPI","title":"<code>GeneratorAPI</code>","text":"<p>generator API e.g. to be used as a</p> <p>command line generator</p> Source code in <code>yprinciple/genapi.py</code> <pre><code>class GeneratorAPI:\n    \"\"\"\n\n    generator API e.g. to be used as a\n\n    command line generator\n    \"\"\"\n\n    def __init__(self, verbose: bool = True, debug: bool = False):\n        \"\"\"\n        constructor\n\n        Args:\n            verbose(bool): if True show verbose messages\n            debug(bool): if True switch debugging on\n        \"\"\"\n        self.verbose = verbose\n        self.debug = debug\n        self.args = None\n\n    @classmethod\n    def fromArgs(cls, args) -&gt; \"GeneratorAPI\":\n        \"\"\"\n        create a GeneratorAPI for the given command line arguments\n\n        Args:\n            args: command line arguments\n\n        Returns:\n            GeneratorAPI:\n        \"\"\"\n        gen = GeneratorAPI(verbose=not args.quiet, debug=args.debug)\n        gen.setWikiAndGetContexts(args)\n        if args.sidif:\n            gen.context, gen.error, gen.errMsg = Context.fromSiDIF_input(\n                args.sidif, debug=args.debug\n            )\n        else:\n            wikiId = args.source if args.push else args.wikiId\n            gen.readContext(wikiId, args.context)\n        # remember complete arguments (e.g. for push)\n        gen.args = args\n        return gen\n\n    def setWikiAndGetContexts(self, args):\n        \"\"\"\n        set my wiki and get Contexts for the given args\n\n        Args:\n            args: command line arguments\n        \"\"\"\n        self.wikiId = args.wikiId\n        self.smwAccess = SMWAccess(args.wikiId)\n        self.smwSourceAccess = SMWAccess(args.source) if args.push else None\n        self.smwContextAccess = self.smwSourceAccess if args.push else self.smwAccess\n        self.mw_contexts = self.smwContextAccess.getMwContexts()\n\n    def readContext(self, wikiId: str, context_name: str):\n        \"\"\"\n        Args:\n            wikiId(str): the wikiId of the wiki to read the context from\n            context_name: the name of the context to read\n        \"\"\"\n        self.mw_context = self.mw_contexts.get(context_name, None)\n        if not self.mw_context:\n            self.context = None\n            self.errmsg = f\"Could not read context {context_name} from {wikiId}\"\n            self.error = Exception(self.errmsg)\n        else:\n            self.context, self.error, self.errMsg = Context.fromWikiContext(\n                self.mw_context, debug=self.debug\n            )\n\n    def filterTargets(self, target_names: list = None) -&gt; dict:\n        \"\"\"\n        filter targets by a list of target_names\n\n        Args:\n            target_names(list): an optional list of target names\n\n        Returns:\n            dict: mapping from target names to targets\n        \"\"\"\n        allTargets = SMWTarget.getSMWTargets()\n        if target_names is None:\n            targets = allTargets\n        else:\n            targets = {}\n            for target_name in target_names:\n                if target_name in allTargets:\n                    targets[target_name] = allTargets[target_name]\n        return targets\n\n    def yieldYpCells(\n        self,\n        hint: str,\n        target_names: list = None,\n        topic_names: list = None,\n        with_subcells: bool = True,\n    ):\n        \"\"\"\n        generate/yield topics and targets via nested loop\n\n        Args:\n            hint(str): hint message to show how the yield is used\n            with_subcells: if True yield sub cells (one level)\n            target_name(list): if set filter targets by name\n            topic_names(list): if set filter topics by name\n        Returns:\n            generator(YpCell)\n        \"\"\"\n\n        def showMsg(topic_name: str, ypCell: YpCell):\n            \"\"\"\n            show a message for the given topic_name\n\n            Args:\n                topic_name(str): topic\n            \"\"\"\n            if self.verbose:\n                target_name = ypCell.target.name\n                print(f\"generating {target_name} for {topic_name} {hint}...\")\n            pass\n\n        targets = self.filterTargets(target_names)\n        for topic_name, topic in self.context.topics.items():\n            # filter topic names\n            if topic_names is not None and not topic_name in topic_names:\n                continue\n            for _target_name, target in targets.items():\n                if target.showInGrid:\n                    ypCell = YpCell.createYpCell(target=target, topic=topic)\n                    if ypCell.target.is_multi:\n                        if with_subcells:\n                            for subCell in ypCell.subCells.values():\n                                showMsg(topic_name, subCell)\n                                yield subCell\n                    else:\n                        showMsg(topic_name, ypCell)\n                        yield ypCell\n\n    def handleFailure(self, ypCell, ex):\n        \"\"\"\n        handle the given failure\n        \"\"\"\n        print(\n            f\"Warning \u26a0\ufe0f: generating {ypCell.target} for {ypCell.modelElement} failed with {str(ex)}\",\n            file=sys.stderr,\n            flush=True,\n        )\n        if self.debug:\n            print(traceback.format_exc())\n\n    def generateViaMwApi(\n        self,\n        target_names: list = None,\n        topic_names: list = None,\n        dryRun: bool = True,\n        withEditor: bool = False,\n    ):\n        \"\"\"\n        start the generation via MediaWiki API\n\n        Args:\n            target_names(list): an optional list of target names\n            topic_name(list): an optional list of topic names\n            dryRun(bool): if True do not transfer results\n            withEditor(bool): if True - start editor\n\n        Return:\n            list(MwGenResult): a list of Mediawiki Generator Results\n        \"\"\"\n        self.smwAccess.wikiClient.login()\n        genResults = []\n        for ypCell in self.yieldYpCells(\"via Mediawiki Api\", target_names, topic_names):\n            try:\n                genResult = ypCell.generateViaMwApi(\n                    smwAccess=self.smwAccess, dryRun=dryRun, withEditor=withEditor\n                )\n                if self.debug or self.verbose:\n                    diff_url = genResult.getDiffUrl()\n                    diff_info = \"\" if diff_url is None else diff_url\n                    diff_info += f\"({len(genResult.markup_diff)})\"\n                    print(f\"diff: {diff_info}\")\n                genResults.append(genResult)\n            except Exception as ex:\n                self.handleFailure(ypCell, ex)\n        return genResults\n\n    def generateToFile(\n        self,\n        target_dir=None,\n        target_names: list = None,\n        topic_names: list = None,\n        dryRun: bool = True,\n        withEditor: bool = False,\n    ):\n        \"\"\"\n        start the generation via MediaWiki Backup Directory\n\n        Args:\n            target_dir(str): the path to the target directory\n            target_names(list): an optional list of target names\n            topic_name(list): an optional list of topic names\n\n            dryRun(bool): if True do not transfer results\n            withEditor(bool): if True - start editor\n\n        Return:\n            list(FileGenResult): a list of File Generator Results\n        \"\"\"\n        genResults = []\n        if target_dir is None:\n            home = Path.home()\n            target_dir = f\"{home}/wikibackup/{self.wikiId}\"\n        for ypCell in self.yieldYpCells(\n            f\" to file in {target_dir}\", target_names, topic_names\n        ):\n            try:\n                genResult = ypCell.generateToFile(\n                    target_dir=target_dir, dryRun=dryRun, withEditor=withEditor\n                )\n                genResults.append(genResult)\n            except Exception as ex:\n                self.handleFailure(ypCell, ex)\n        return genResults\n\n    def push(self):\n        \"\"\"\n        push according to my command line args\n        \"\"\"\n        if not self.args.source:\n            raise \"missing source wiki\"\n        if self.args.topics:\n            topic_names = self.args.topics\n        else:\n            topic_names = self.context.topics.keys()\n        login = self.args.login\n        force = self.args.force\n        ignore = True\n        fromWikiId = self.args.source\n        wikiPush = WikiPush(\n            fromWikiId=fromWikiId,\n            toWikiId=self.smwAccess.wikiId,\n            login=login,\n            verbose=not self.args.quiet,\n            debug=self.args.debug,\n        )\n        if not self.args.quiet:\n            print(\n                f\"pushing concept {self.args.context} from {self.args.source} to {self.wikiId} ...\"\n            )\n        all_page_titles = []\n        for topic_name in topic_names:\n            topic = self.context.topics[topic_name]\n            for page_titles, page_query, query_field in [\n                ([f\"Concept:{topic_name}\"], None, None),\n                ([f\"Category:{topic_name}\"], None, None),\n                ([f\"Template:{topic_name}\"], None, None),\n                ([f\"Form:{topic_name}\"], None, None),\n                ([f\"Help:{topic_name}\"], None, None),\n                ([f\"List of {topic.pluralName}\"], None, None),\n                (\n                    None,\n                    f\"{{{{#ask: [[Property topic::Concept:{topic_name}]]|?#=page}}}}\",\n                    \"page\",\n                ),\n                (\n                    None,\n                    f\"{{{{#ask: [[Topic name::{topic_name}]]|?Topic context=context}}}}\",\n                    \"context\",\n                ),\n            ]:\n                if not page_titles:\n                    page_titles = wikiPush.query(\n                        page_query,\n                        wiki=self.smwSourceAccess.wikiClient,\n                        queryField=query_field,\n                    )\n                all_page_titles.extend(\n                    page_title\n                    for page_title in page_titles\n                    if page_title not in all_page_titles\n                )\n        failed = wikiPush.push(\n            pageTitles=all_page_titles, force=force, ignore=ignore, withImages=True\n        )\n        if len(failed) &gt; 0:\n            print(f\"\ufe0fError {len(failed)} push attempts failed \u274c\ufe0f\")\n            for i, fail_name in enumerate(failed[:20]):\n                print(f\"    {i+1:2}: {fail_name} \u274c\")\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.__init__","title":"<code>__init__(verbose=True, debug=False)</code>","text":"<p>constructor</p> <p>Parameters:</p> Name Type Description Default <code>verbose(bool)</code> <p>if True show verbose messages</p> required <code>debug(bool)</code> <p>if True switch debugging on</p> required Source code in <code>yprinciple/genapi.py</code> <pre><code>def __init__(self, verbose: bool = True, debug: bool = False):\n    \"\"\"\n    constructor\n\n    Args:\n        verbose(bool): if True show verbose messages\n        debug(bool): if True switch debugging on\n    \"\"\"\n    self.verbose = verbose\n    self.debug = debug\n    self.args = None\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.filterTargets","title":"<code>filterTargets(target_names=None)</code>","text":"<p>filter targets by a list of target_names</p> <p>Parameters:</p> Name Type Description Default <code>target_names(list)</code> <p>an optional list of target names</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>mapping from target names to targets</p> Source code in <code>yprinciple/genapi.py</code> <pre><code>def filterTargets(self, target_names: list = None) -&gt; dict:\n    \"\"\"\n    filter targets by a list of target_names\n\n    Args:\n        target_names(list): an optional list of target names\n\n    Returns:\n        dict: mapping from target names to targets\n    \"\"\"\n    allTargets = SMWTarget.getSMWTargets()\n    if target_names is None:\n        targets = allTargets\n    else:\n        targets = {}\n        for target_name in target_names:\n            if target_name in allTargets:\n                targets[target_name] = allTargets[target_name]\n    return targets\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.fromArgs","title":"<code>fromArgs(args)</code>  <code>classmethod</code>","text":"<p>create a GeneratorAPI for the given command line arguments</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <p>command line arguments</p> required <p>Returns:</p> Name Type Description <code>GeneratorAPI</code> <code>GeneratorAPI</code> Source code in <code>yprinciple/genapi.py</code> <pre><code>@classmethod\ndef fromArgs(cls, args) -&gt; \"GeneratorAPI\":\n    \"\"\"\n    create a GeneratorAPI for the given command line arguments\n\n    Args:\n        args: command line arguments\n\n    Returns:\n        GeneratorAPI:\n    \"\"\"\n    gen = GeneratorAPI(verbose=not args.quiet, debug=args.debug)\n    gen.setWikiAndGetContexts(args)\n    if args.sidif:\n        gen.context, gen.error, gen.errMsg = Context.fromSiDIF_input(\n            args.sidif, debug=args.debug\n        )\n    else:\n        wikiId = args.source if args.push else args.wikiId\n        gen.readContext(wikiId, args.context)\n    # remember complete arguments (e.g. for push)\n    gen.args = args\n    return gen\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.generateToFile","title":"<code>generateToFile(target_dir=None, target_names=None, topic_names=None, dryRun=True, withEditor=False)</code>","text":"<p>start the generation via MediaWiki Backup Directory</p> <p>Parameters:</p> Name Type Description Default <code>target_dir(str)</code> <p>the path to the target directory</p> required <code>target_names(list)</code> <p>an optional list of target names</p> required <code>topic_name(list)</code> <p>an optional list of topic names</p> required <code>dryRun(bool)</code> <p>if True do not transfer results</p> required <code>withEditor(bool)</code> <p>if True - start editor</p> required Return <p>list(FileGenResult): a list of File Generator Results</p> Source code in <code>yprinciple/genapi.py</code> <pre><code>def generateToFile(\n    self,\n    target_dir=None,\n    target_names: list = None,\n    topic_names: list = None,\n    dryRun: bool = True,\n    withEditor: bool = False,\n):\n    \"\"\"\n    start the generation via MediaWiki Backup Directory\n\n    Args:\n        target_dir(str): the path to the target directory\n        target_names(list): an optional list of target names\n        topic_name(list): an optional list of topic names\n\n        dryRun(bool): if True do not transfer results\n        withEditor(bool): if True - start editor\n\n    Return:\n        list(FileGenResult): a list of File Generator Results\n    \"\"\"\n    genResults = []\n    if target_dir is None:\n        home = Path.home()\n        target_dir = f\"{home}/wikibackup/{self.wikiId}\"\n    for ypCell in self.yieldYpCells(\n        f\" to file in {target_dir}\", target_names, topic_names\n    ):\n        try:\n            genResult = ypCell.generateToFile(\n                target_dir=target_dir, dryRun=dryRun, withEditor=withEditor\n            )\n            genResults.append(genResult)\n        except Exception as ex:\n            self.handleFailure(ypCell, ex)\n    return genResults\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.generateViaMwApi","title":"<code>generateViaMwApi(target_names=None, topic_names=None, dryRun=True, withEditor=False)</code>","text":"<p>start the generation via MediaWiki API</p> <p>Parameters:</p> Name Type Description Default <code>target_names(list)</code> <p>an optional list of target names</p> required <code>topic_name(list)</code> <p>an optional list of topic names</p> required <code>dryRun(bool)</code> <p>if True do not transfer results</p> required <code>withEditor(bool)</code> <p>if True - start editor</p> required Return <p>list(MwGenResult): a list of Mediawiki Generator Results</p> Source code in <code>yprinciple/genapi.py</code> <pre><code>def generateViaMwApi(\n    self,\n    target_names: list = None,\n    topic_names: list = None,\n    dryRun: bool = True,\n    withEditor: bool = False,\n):\n    \"\"\"\n    start the generation via MediaWiki API\n\n    Args:\n        target_names(list): an optional list of target names\n        topic_name(list): an optional list of topic names\n        dryRun(bool): if True do not transfer results\n        withEditor(bool): if True - start editor\n\n    Return:\n        list(MwGenResult): a list of Mediawiki Generator Results\n    \"\"\"\n    self.smwAccess.wikiClient.login()\n    genResults = []\n    for ypCell in self.yieldYpCells(\"via Mediawiki Api\", target_names, topic_names):\n        try:\n            genResult = ypCell.generateViaMwApi(\n                smwAccess=self.smwAccess, dryRun=dryRun, withEditor=withEditor\n            )\n            if self.debug or self.verbose:\n                diff_url = genResult.getDiffUrl()\n                diff_info = \"\" if diff_url is None else diff_url\n                diff_info += f\"({len(genResult.markup_diff)})\"\n                print(f\"diff: {diff_info}\")\n            genResults.append(genResult)\n        except Exception as ex:\n            self.handleFailure(ypCell, ex)\n    return genResults\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.handleFailure","title":"<code>handleFailure(ypCell, ex)</code>","text":"<p>handle the given failure</p> Source code in <code>yprinciple/genapi.py</code> <pre><code>def handleFailure(self, ypCell, ex):\n    \"\"\"\n    handle the given failure\n    \"\"\"\n    print(\n        f\"Warning \u26a0\ufe0f: generating {ypCell.target} for {ypCell.modelElement} failed with {str(ex)}\",\n        file=sys.stderr,\n        flush=True,\n    )\n    if self.debug:\n        print(traceback.format_exc())\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.push","title":"<code>push()</code>","text":"<p>push according to my command line args</p> Source code in <code>yprinciple/genapi.py</code> <pre><code>def push(self):\n    \"\"\"\n    push according to my command line args\n    \"\"\"\n    if not self.args.source:\n        raise \"missing source wiki\"\n    if self.args.topics:\n        topic_names = self.args.topics\n    else:\n        topic_names = self.context.topics.keys()\n    login = self.args.login\n    force = self.args.force\n    ignore = True\n    fromWikiId = self.args.source\n    wikiPush = WikiPush(\n        fromWikiId=fromWikiId,\n        toWikiId=self.smwAccess.wikiId,\n        login=login,\n        verbose=not self.args.quiet,\n        debug=self.args.debug,\n    )\n    if not self.args.quiet:\n        print(\n            f\"pushing concept {self.args.context} from {self.args.source} to {self.wikiId} ...\"\n        )\n    all_page_titles = []\n    for topic_name in topic_names:\n        topic = self.context.topics[topic_name]\n        for page_titles, page_query, query_field in [\n            ([f\"Concept:{topic_name}\"], None, None),\n            ([f\"Category:{topic_name}\"], None, None),\n            ([f\"Template:{topic_name}\"], None, None),\n            ([f\"Form:{topic_name}\"], None, None),\n            ([f\"Help:{topic_name}\"], None, None),\n            ([f\"List of {topic.pluralName}\"], None, None),\n            (\n                None,\n                f\"{{{{#ask: [[Property topic::Concept:{topic_name}]]|?#=page}}}}\",\n                \"page\",\n            ),\n            (\n                None,\n                f\"{{{{#ask: [[Topic name::{topic_name}]]|?Topic context=context}}}}\",\n                \"context\",\n            ),\n        ]:\n            if not page_titles:\n                page_titles = wikiPush.query(\n                    page_query,\n                    wiki=self.smwSourceAccess.wikiClient,\n                    queryField=query_field,\n                )\n            all_page_titles.extend(\n                page_title\n                for page_title in page_titles\n                if page_title not in all_page_titles\n            )\n    failed = wikiPush.push(\n        pageTitles=all_page_titles, force=force, ignore=ignore, withImages=True\n    )\n    if len(failed) &gt; 0:\n        print(f\"\ufe0fError {len(failed)} push attempts failed \u274c\ufe0f\")\n        for i, fail_name in enumerate(failed[:20]):\n            print(f\"    {i+1:2}: {fail_name} \u274c\")\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.readContext","title":"<code>readContext(wikiId, context_name)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>wikiId(str)</code> <p>the wikiId of the wiki to read the context from</p> required <code>context_name</code> <code>str</code> <p>the name of the context to read</p> required Source code in <code>yprinciple/genapi.py</code> <pre><code>def readContext(self, wikiId: str, context_name: str):\n    \"\"\"\n    Args:\n        wikiId(str): the wikiId of the wiki to read the context from\n        context_name: the name of the context to read\n    \"\"\"\n    self.mw_context = self.mw_contexts.get(context_name, None)\n    if not self.mw_context:\n        self.context = None\n        self.errmsg = f\"Could not read context {context_name} from {wikiId}\"\n        self.error = Exception(self.errmsg)\n    else:\n        self.context, self.error, self.errMsg = Context.fromWikiContext(\n            self.mw_context, debug=self.debug\n        )\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.setWikiAndGetContexts","title":"<code>setWikiAndGetContexts(args)</code>","text":"<p>set my wiki and get Contexts for the given args</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <p>command line arguments</p> required Source code in <code>yprinciple/genapi.py</code> <pre><code>def setWikiAndGetContexts(self, args):\n    \"\"\"\n    set my wiki and get Contexts for the given args\n\n    Args:\n        args: command line arguments\n    \"\"\"\n    self.wikiId = args.wikiId\n    self.smwAccess = SMWAccess(args.wikiId)\n    self.smwSourceAccess = SMWAccess(args.source) if args.push else None\n    self.smwContextAccess = self.smwSourceAccess if args.push else self.smwAccess\n    self.mw_contexts = self.smwContextAccess.getMwContexts()\n</code></pre>"},{"location":"#yprinciple.genapi.GeneratorAPI.yieldYpCells","title":"<code>yieldYpCells(hint, target_names=None, topic_names=None, with_subcells=True)</code>","text":"<p>generate/yield topics and targets via nested loop</p> <p>Parameters:</p> Name Type Description Default <code>hint(str)</code> <p>hint message to show how the yield is used</p> required <code>with_subcells</code> <code>bool</code> <p>if True yield sub cells (one level)</p> <code>True</code> <code>target_name(list)</code> <p>if set filter targets by name</p> required <code>topic_names(list)</code> <p>if set filter topics by name</p> required <p>Returns:     generator(YpCell)</p> Source code in <code>yprinciple/genapi.py</code> <pre><code>def yieldYpCells(\n    self,\n    hint: str,\n    target_names: list = None,\n    topic_names: list = None,\n    with_subcells: bool = True,\n):\n    \"\"\"\n    generate/yield topics and targets via nested loop\n\n    Args:\n        hint(str): hint message to show how the yield is used\n        with_subcells: if True yield sub cells (one level)\n        target_name(list): if set filter targets by name\n        topic_names(list): if set filter topics by name\n    Returns:\n        generator(YpCell)\n    \"\"\"\n\n    def showMsg(topic_name: str, ypCell: YpCell):\n        \"\"\"\n        show a message for the given topic_name\n\n        Args:\n            topic_name(str): topic\n        \"\"\"\n        if self.verbose:\n            target_name = ypCell.target.name\n            print(f\"generating {target_name} for {topic_name} {hint}...\")\n        pass\n\n    targets = self.filterTargets(target_names)\n    for topic_name, topic in self.context.topics.items():\n        # filter topic names\n        if topic_names is not None and not topic_name in topic_names:\n            continue\n        for _target_name, target in targets.items():\n            if target.showInGrid:\n                ypCell = YpCell.createYpCell(target=target, topic=topic)\n                if ypCell.target.is_multi:\n                    if with_subcells:\n                        for subCell in ypCell.subCells.values():\n                            showMsg(topic_name, subCell)\n                            yield subCell\n                else:\n                    showMsg(topic_name, ypCell)\n                    yield ypCell\n</code></pre>"},{"location":"#yprinciple.gengrid","title":"<code>gengrid</code>","text":"<p>Created on 25.11.2022</p> <p>@author: wf</p>"},{"location":"#yprinciple.gengrid.GeneratorGrid","title":"<code>GeneratorGrid</code>","text":"<p>generator and selection grid</p> <p>see https://wiki.bitplan.com/index.php/Y-Prinzip#Example</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>class GeneratorGrid:\n    \"\"\"\n    generator and selection grid\n\n    see https://wiki.bitplan.com/index.php/Y-Prinzip#Example\n    \"\"\"\n\n    def __init__(\n        self, targets: dict, parent, solution: WebSolution, iconSize: str = \"32px\"\n    ):\n        \"\"\"\n        constructor\n\n        Args:\n            targets(dict): a list of targets\n            parent: the parent element\n            solution(WebSolution): the solution\n\n        \"\"\"\n        self.parent = parent\n        self.solution = solution\n        self.color_schema = solution.config.color_schema\n        self.iconSize = iconSize\n        self.cell_hide_size_info = True\n        self.checkboxes = {}\n        self.ypcell_by_id = {}\n        self.checkbox_by_id = {}\n        self.header_checkbox_by_id = {}\n        self.cell_debug_msg_divs = []\n        self.targets = targets\n        self.setup_styles()\n        self.setup_ui()\n\n    def setup_ui(self):\n        \"\"\"\n        setup the user interface\n        \"\"\"\n        with self.parent:\n            target_columns = len(self.displayTargets())\n            # two more for the Topics and check box columns\n            target_columns += 2\n            self.grid = ui.grid(columns=target_columns).classes(\"w-full gap-0\")\n            self.setup_target_header_row()\n            self.setup_topic_header_row()\n\n    def setup_styles(self):\n        \"\"\"\n        setup the styles for the ui\n        \"\"\"\n        self.header_classes = \"text-center\"\n        # centering\n        self.center_classes = \"flex flex-col items-center justify-center\"\n        # see https://www.materialpalette.com/indigo/indigo\n        # and https://github.com/WolfgangFahl/nicegui_widgets/blob/main/ngwidgets/color_schema.py\n        # light primary color\n        self.header_background = \"#c5cae9\"\n        #\n        self.light_header_background = \"#f5f5f5\"\n        self.bs_secondary = \"#6c757d\"\n        self.header_style = (\n            f\"font-size: 1.0rem;background-color: {self.header_background}\"\n        )\n        self.light_header_style = f\"background-color: {self.light_header_background}\"\n\n    def add_header_cell(self, title: str):\n        \"\"\"\n        add a header cell with the given title\n\n        Args:\n            title(str): the title of the cell\n        \"\"\"\n        with self.grid:\n            classes = self.header_classes + self.center_classes\n            header_cell = ui.row().classes(classes).style(self.header_style)\n            with header_cell:\n                header_div = (\n                    ui.html().classes(self.header_classes).style(self.header_style)\n                )\n                header_div.content = f\"&lt;strong&gt;{title}&lt;/strong&gt;\"\n        return header_cell\n\n    def setup_target_header_row(self):\n        \"\"\"\n        setup the header row\n        \"\"\"\n        with self.grid:\n            self.generateButton = ui.button(\n                icon=\"play_circle\", on_click=self.onGenerateButtonClick\n            )\n        self.targets_column_header = self.add_header_cell(\"Target\")\n        for target in self.displayTargets():\n            target_header_cell = self.add_header_cell(target.name)\n            with target_header_cell:\n                ui.icon(target.icon_name, size=self.iconSize, color=self.bs_secondary)\n                # &lt;i class=\"mdi mdi-archive\" style=\"color: rgb(108, 117, 125); font-size: 32px;\"&gt;&lt;/i&gt;\n                # markup+=f\"\"\"&lt;i class=\"mdi mdi-{target.icon_name}\" style=\"color: {self.bs_secondary};font-size:{self.iconSize};\"&gt;&lt;/i&gt;\"\"\"\n                # &lt;i class=\"q-icon notranslate material-icons\" aria-hidden=\"true\" role=\"presentation\" id=\"c48\"&gt;archive&lt;/i&gt;\n                # markup+=f\"\"\"&lt;i class=\"q-icon notranslate material-icons\" aria-hidden=\"true\" role=\"presentation\"&gt;{target.icon_name}&lt;/i&gt;\"\"\"\n                pass\n\n    def setup_topic_header_row(self):\n        \"\"\"\n        setup the second header row\n        \"\"\"\n        with self.grid:\n            self.topics_column_header = (\n                ui.html().classes(self.header_classes).style(self.header_style)\n            )\n            self.topics_column_header.content = \"&lt;strong&gt;Topics&lt;/strong&gt;\"\n        self.header_checkboxes = {}\n        self.header_checkboxes[\"all\"] = self.create_simple_checkbox(\n            parent=self.grid,\n            label_text=\"\u2198\",\n            title=\"select all\",\n            classes=self.center_classes,\n            on_change=self.on_select_all,\n        )\n        for target in self.displayTargets():\n            self.header_checkboxes[target.name] = self.create_simple_checkbox(\n                parent=self.grid,\n                label_text=\"\u2193\",\n                title=f\"select all {target.name}\",\n                classes=self.center_classes,\n                on_change=self.on_select_column,\n            )\n\n    def getCheckedYpCells(self) -&gt; List[YpCell]:\n        \"\"\"\n        get all checked YpCells\n        \"\"\"\n        checkedYpCells = []\n        # generate in order of rows\n        for checkbox_row in self.checkboxes.values():\n            for checkbox, ypCell in checkbox_row.values():\n                if checkbox.value and ypCell.ui_ready:\n                    checkedYpCells.append(ypCell)\n                for subCell in ypCell.subCells.values():\n                    if subCell.ui_ready:\n                        checkbox = self.checkbox_by_id[subCell.checkbox_id]\n                        if checkbox.value:\n                            checkedYpCells.append(subCell)\n        return checkedYpCells\n\n    def generateCheckedCells(self, cellsToGen: List[YpCell]):\n        try:\n            # force login\n            self.solution.smwAccess.wikiClient.login()\n            for ypCell in cellsToGen:\n                cell_checkbox = self.checkbox_by_id.get(ypCell.checkbox_id, None)\n                status_div = cell_checkbox.status_div\n                with status_div:\n                    status_div.clear()\n                    status_div.content = \"\"\n                try:\n                    genResult = ypCell.generateViaMwApi(\n                        smwAccess=self.solution.smwAccess,\n                        dryRun=self.solution.dryRun,\n                        withEditor=self.solution.openEditor,\n                    )\n                    if genResult is not None and cell_checkbox is not None:\n                        delta_color = \"\"\n                        diff_url = genResult.getDiffUrl()\n                        if diff_url is not None:\n                            if genResult.page_changed():\n                                delta_color = \"text-red-500\"\n                            else:\n                                delta_color = \"text-green-500\"\n                        else:\n                            delta_color = \"text-gray-500\"\n                        with status_div:\n                            link = Link.create(url=diff_url, text=\"\u0394\")\n                            _link_html = ui.html(link).classes(\n                                \"text-xl font-bold \" + delta_color,\n                            )\n                except BaseException as ex:\n                    with status_div:\n                        status_div.content = f\"\u2757 error:{str(ex)}\"\n                    self.solution.handle_exception(ex)\n                self.updateProgress()\n        except Exception as outer_ex:\n            self.solution.handle_exception(outer_ex)\n\n    async def onGenerateButtonClick(self, _msg):\n        \"\"\"\n        react on the generate button having been clicked\n        \"\"\"\n        cellsToGen = self.getCheckedYpCells()\n        total = len(cellsToGen)\n        ui.notify(f\"running {total} generator tasks\")\n        self.resetProgress(\"generating\", total)\n        await run.io_bound(self.generateCheckedCells, cellsToGen)\n\n    def check_ypcell_box(self, checkbox, ypCell, checked: bool):\n        \"\"\"\n        check the given checkbox and the ypCell belonging to it\n        \"\"\"\n        checkbox.value = checked\n        self.checkSubCells(ypCell, checked)\n\n    def checkSubCells(self, ypCell, checked):\n        # loop over all subcells\n        for subcell in ypCell.subCells.values():\n            # and set the checkbox value accordingly\n            checkbox = self.checkbox_by_id[subcell.checkbox_id]\n            checkbox.value = checked\n\n    def check_row(self, checkbox_row, checked: bool):\n        for checkbox, ypCell in checkbox_row.values():\n            self.check_ypcell_box(checkbox, ypCell, checked)\n\n    async def on_select_all(self, args):\n        \"\"\"\n        react on \"select all\" being clicked\n        \"\"\"\n        try:\n            checked = args.value\n            for checkbox_row in self.checkboxes.values():\n                self.check_row(checkbox_row, checked)\n        except BaseException as ex:\n            self.solution.handle_exception(ex)\n        pass\n\n    def get_select(self, args) -&gt; str:\n        \"\"\"\n        get the select from the sender's tooltip\n        \"\"\"\n        select = None\n        slots = args.sender.slots.get(\"default\")\n        if slots:\n            children = slots.children\n            if len(children) &gt; 0:\n                tooltip = children[0]\n                if isinstance(tooltip, Tooltip):\n                    title = tooltip.text\n                    select = title.replace(\"select all\", \"\").strip()\n        return select\n\n    async def on_select_column(self, args):\n        \"\"\"\n        react on \"select all \" for a column being clicked\n        \"\"\"\n        try:\n            checked = args.value\n            target_name = self.get_select(args)\n            if target_name:\n                for checkboxes in self.checkboxes.values():\n                    checkbox, ypCell = checkboxes[target_name]\n                    self.check_ypcell_box(checkbox, ypCell, checked)\n        except BaseException as ex:\n            self.solution.handle_exception(ex)\n\n    async def on_select_row(self, args):\n        \"\"\"\n        react on \"select all \" for a row being clicked\n        \"\"\"\n        try:\n            checked = args.value\n            topic_name = self.get_select(args)\n            if topic_name:\n                checkbox_row = self.checkboxes[topic_name]\n                self.check_row(checkbox_row, checked)\n        except BaseException as ex:\n            self.solution.handle_exception(ex)\n\n    async def onParentCheckboxClick(self, args):\n        \"\"\"\n        a ypCell checkbox has been clicked for a ypCell that has subCells\n        \"\"\"\n        # get the parent checkbox\n        checkbox = args.sender\n        checked = args.value\n        # lookup the ypCell\n        ypCell = self.ypcell_by_id[checkbox.id]\n        self.checkSubCells(ypCell, checked)\n\n    def displayTargets(self):\n        # return self.targets.values()\n        dt = []\n        for target in self.targets.values():\n            if target.showInGrid:\n                dt.append(target)\n        return dt\n\n    def get_colums(self, target: Target) -&gt; int:\n        \"\"\"\n        get the number of columns for the given target\n\n        Args:\n            target(Target): the target\n\n        Returns:\n            int: the number of columns to be displayed\n        \"\"\"\n        cols = 2 if target.is_multi else 1\n        return cols\n\n    def create_simple_checkbox(\n        self,\n        parent,\n        label_text: str,\n        title: str,\n        classes: str = None,\n        on_change: Callable = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Create a NiceGUI checkbox with a label and optional tooltip, adding it to the specified parent container.\n\n        Args:\n            parent: The parent UI element to attach the checkbox to. Must be a NiceGUI container.\n            label_text (str): The text label to display next to the checkbox.\n            title (str): The tooltip text to display when hovering over the checkbox.\n            classes (str, optional): CSS classes for additional styling. If None, uses a default.\n            **kwargs: Additional keyword arguments to pass to the checkbox.\n\n        Returns:\n            ui.checkbox: The created checkbox instance.\n        \"\"\"\n        if classes is None:\n            classes = self.header_classes\n        with parent:\n            checkbox = ui.checkbox(\n                text=label_text,\n                on_change=on_change,\n                **kwargs,\n            )\n            checkbox.classes(classes)\n            checkbox.style(self.light_header_style)\n            checkbox.tooltip(title)\n        return checkbox\n\n    def create_check_box_for_cell(\n        self, yp_cell: YpCell, parent, columns: int = 1\n    ) -&gt; ui.checkbox:\n        \"\"\"\n        create a nicegui CheckBox for the given YpCell\n\n        Args:\n            yp_cell: YpCell - the YpCell to create a checkbox for\n            parent: the nicegui parent element\n            columns(int) the number of columns\n\n        Returns:\n            ui.checkbox: The created NiceGUI checkbox element.\n        \"\"\"\n        with parent:\n            yp_cell_card = ui.card()\n        label_text = yp_cell.getLabelText()\n        checkbox = self.create_simple_checkbox(\n            parent=yp_cell_card, label_text=label_text, title=label_text\n        )\n        yp_cell.getPage(self.solution.smwAccess)\n        color = \"blue\" if yp_cell.status == \"\u2705\" else \"red\"\n        link = f\"&lt;a href='{yp_cell.pageUrl}' style='color:{color}'&gt;{label_text}&lt;a&gt;\"\n        if yp_cell.status == \"\u24d8\":\n            link = f\"{label_text}\"\n        # in a one column setting we need to break link and status message\n        if columns == 1:\n            label_text = label_text.replace(\":\", \":&lt;br&gt;\")\n            delim = \"&lt;br&gt;\"\n        else:\n            delim = \"&amp;nbsp;\"\n        with yp_cell_card:\n            link_html = ui.html()\n            link_html.content = f\"{link}{delim}\"\n            debug_div = ui.html()\n            debug_div.content = f\"{yp_cell.statusMsg}\"\n            debug_div.visible = not self.cell_hide_size_info\n            status_div = ui.html()\n            status_div.content = yp_cell.status\n            checkbox.status_div = status_div\n            self.cell_debug_msg_divs.append(debug_div)\n        # link ypCell with check box via a unique identifier\n        yp_cell.checkbox_id = checkbox.id\n        self.ypcell_by_id[checkbox.id] = checkbox.id\n        self.checkbox_by_id[checkbox.id] = checkbox\n        yp_cell.ui_ready = True\n        return checkbox\n\n    def add_topic_cell(self, topic: Topic):\n        \"\"\"\n        add an icon for the given topic\n        \"\"\"\n        topic_cell = self.add_header_cell(topic.name)\n        icon_url = None\n        if hasattr(topic, \"iconUrl\"):\n            if topic.iconUrl.startswith(\"http\"):\n                icon_url = f\"{topic.iconUrl}\"\n            if icon_url is None and self.solution.mw_context is not None:\n                icon_url = f\"{self.solution.mw_context.wiki_url}{topic.iconUrl}\"\n        if icon_url is None:\n            icon_url = \"?\"\n        style = f\"width: {self.iconSize}; height: {self.iconSize};\"\n        with topic_cell:\n            topic_icon = ui.image(\n                source=icon_url,\n            )\n        topic_icon.style(style)\n        return topic_icon\n\n    def resetProgress(self, desc: str, total: int):\n        self.solution.progressBar.desc = desc\n        self.solution.progressBar.total = total\n        self.solution.progressBar.reset()\n\n    def updateProgress(self):\n        \"\"\"\n        update the progress\n        \"\"\"\n        self.solution.progressBar.update(1)\n        self.grid.update()\n\n    def add_yp_cell(self, parent, ypCell: YpCell) -&gt; \"ui.checkbox\":\n        \"\"\"\n        add the given ypCell\n        \"\"\"\n        if len(ypCell.subCells) &gt; 0:\n            checkbox = None\n            with parent:\n                # content_div=ui.row()\n                hide_show = ui.expansion(\"\", icon=\"format_list_bulleted\").classes(\n                    \"w-full\"\n                )\n                # hide_show = HideShow(\n                #    show_content=False,\n                #    hide_show_label=(\"properties\", \"properties\"),\n                #    content_div=content_div\n                # )\n            for _subcell_name, subCell in ypCell.subCells.items():\n                checkbox = self.create_check_box_for_cell(subCell, parent=hide_show)\n                self.updateProgress()\n                pass\n        else:\n            checkbox = self.create_check_box_for_cell(ypCell, parent=self.grid)\n            self.updateProgress()\n        return checkbox\n\n    def add_topic_rows(self, context: Context):\n        \"\"\"\n        add the topic rows for the given context\n\n        Args:\n            context(Context): the context for which do add topic rows\n        \"\"\"\n        total_steps = 0\n        for topic_name, topic in context.topics.items():\n            total_steps += len(self.displayTargets()) - 1\n            total_steps += len(topic.properties)\n        self.resetProgress(\"preparing\", total=total_steps)\n        for topic_name, topic in context.topics.items():\n            self.checkboxes[topic_name] = {}\n            checkbox_row = self.checkboxes[topic_name]\n            with self.grid:\n                self.add_topic_cell(topic)\n                checkbox = self.create_simple_checkbox(\n                    parent=self.grid,\n                    label_text=\"\u2192\",\n                    title=f\"select all {topic_name}\",\n                    on_change=self.on_select_row,\n                )\n            for target in self.displayTargets():\n                ypCell = YpCell.createYpCell(target=target, topic=topic)\n                checkbox = self.add_yp_cell(parent=self.grid, ypCell=ypCell)\n                if checkbox:\n                    checkbox_row[target.name] = (checkbox, ypCell)\n            pass\n\n    def set_hide_show_status_of_cell_debug_msg(self, hidden: bool = False):\n        \"\"\"\n        Sets the hidden status of all cell debug messages\n        Args:\n            hidden: If True hide debug messages else show them\n        \"\"\"\n        try:\n            self.cell_hide_size_info = hidden\n            for div in self.cell_debug_msg_divs:\n                div.visible = not hidden\n            self.grid.update()\n        except Exception as ex:\n            self.solution.handle_exception(ex)\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.__init__","title":"<code>__init__(targets, parent, solution, iconSize='32px')</code>","text":"<p>constructor</p> <p>Parameters:</p> Name Type Description Default <code>targets(dict)</code> <p>a list of targets</p> required <code>parent</code> <p>the parent element</p> required <code>solution(WebSolution)</code> <p>the solution</p> required Source code in <code>yprinciple/gengrid.py</code> <pre><code>def __init__(\n    self, targets: dict, parent, solution: WebSolution, iconSize: str = \"32px\"\n):\n    \"\"\"\n    constructor\n\n    Args:\n        targets(dict): a list of targets\n        parent: the parent element\n        solution(WebSolution): the solution\n\n    \"\"\"\n    self.parent = parent\n    self.solution = solution\n    self.color_schema = solution.config.color_schema\n    self.iconSize = iconSize\n    self.cell_hide_size_info = True\n    self.checkboxes = {}\n    self.ypcell_by_id = {}\n    self.checkbox_by_id = {}\n    self.header_checkbox_by_id = {}\n    self.cell_debug_msg_divs = []\n    self.targets = targets\n    self.setup_styles()\n    self.setup_ui()\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.add_header_cell","title":"<code>add_header_cell(title)</code>","text":"<p>add a header cell with the given title</p> <p>Parameters:</p> Name Type Description Default <code>title(str)</code> <p>the title of the cell</p> required Source code in <code>yprinciple/gengrid.py</code> <pre><code>def add_header_cell(self, title: str):\n    \"\"\"\n    add a header cell with the given title\n\n    Args:\n        title(str): the title of the cell\n    \"\"\"\n    with self.grid:\n        classes = self.header_classes + self.center_classes\n        header_cell = ui.row().classes(classes).style(self.header_style)\n        with header_cell:\n            header_div = (\n                ui.html().classes(self.header_classes).style(self.header_style)\n            )\n            header_div.content = f\"&lt;strong&gt;{title}&lt;/strong&gt;\"\n    return header_cell\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.add_topic_cell","title":"<code>add_topic_cell(topic)</code>","text":"<p>add an icon for the given topic</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def add_topic_cell(self, topic: Topic):\n    \"\"\"\n    add an icon for the given topic\n    \"\"\"\n    topic_cell = self.add_header_cell(topic.name)\n    icon_url = None\n    if hasattr(topic, \"iconUrl\"):\n        if topic.iconUrl.startswith(\"http\"):\n            icon_url = f\"{topic.iconUrl}\"\n        if icon_url is None and self.solution.mw_context is not None:\n            icon_url = f\"{self.solution.mw_context.wiki_url}{topic.iconUrl}\"\n    if icon_url is None:\n        icon_url = \"?\"\n    style = f\"width: {self.iconSize}; height: {self.iconSize};\"\n    with topic_cell:\n        topic_icon = ui.image(\n            source=icon_url,\n        )\n    topic_icon.style(style)\n    return topic_icon\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.add_topic_rows","title":"<code>add_topic_rows(context)</code>","text":"<p>add the topic rows for the given context</p> <p>Parameters:</p> Name Type Description Default <code>context(Context)</code> <p>the context for which do add topic rows</p> required Source code in <code>yprinciple/gengrid.py</code> <pre><code>def add_topic_rows(self, context: Context):\n    \"\"\"\n    add the topic rows for the given context\n\n    Args:\n        context(Context): the context for which do add topic rows\n    \"\"\"\n    total_steps = 0\n    for topic_name, topic in context.topics.items():\n        total_steps += len(self.displayTargets()) - 1\n        total_steps += len(topic.properties)\n    self.resetProgress(\"preparing\", total=total_steps)\n    for topic_name, topic in context.topics.items():\n        self.checkboxes[topic_name] = {}\n        checkbox_row = self.checkboxes[topic_name]\n        with self.grid:\n            self.add_topic_cell(topic)\n            checkbox = self.create_simple_checkbox(\n                parent=self.grid,\n                label_text=\"\u2192\",\n                title=f\"select all {topic_name}\",\n                on_change=self.on_select_row,\n            )\n        for target in self.displayTargets():\n            ypCell = YpCell.createYpCell(target=target, topic=topic)\n            checkbox = self.add_yp_cell(parent=self.grid, ypCell=ypCell)\n            if checkbox:\n                checkbox_row[target.name] = (checkbox, ypCell)\n        pass\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.add_yp_cell","title":"<code>add_yp_cell(parent, ypCell)</code>","text":"<p>add the given ypCell</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def add_yp_cell(self, parent, ypCell: YpCell) -&gt; \"ui.checkbox\":\n    \"\"\"\n    add the given ypCell\n    \"\"\"\n    if len(ypCell.subCells) &gt; 0:\n        checkbox = None\n        with parent:\n            # content_div=ui.row()\n            hide_show = ui.expansion(\"\", icon=\"format_list_bulleted\").classes(\n                \"w-full\"\n            )\n            # hide_show = HideShow(\n            #    show_content=False,\n            #    hide_show_label=(\"properties\", \"properties\"),\n            #    content_div=content_div\n            # )\n        for _subcell_name, subCell in ypCell.subCells.items():\n            checkbox = self.create_check_box_for_cell(subCell, parent=hide_show)\n            self.updateProgress()\n            pass\n    else:\n        checkbox = self.create_check_box_for_cell(ypCell, parent=self.grid)\n        self.updateProgress()\n    return checkbox\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.check_ypcell_box","title":"<code>check_ypcell_box(checkbox, ypCell, checked)</code>","text":"<p>check the given checkbox and the ypCell belonging to it</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def check_ypcell_box(self, checkbox, ypCell, checked: bool):\n    \"\"\"\n    check the given checkbox and the ypCell belonging to it\n    \"\"\"\n    checkbox.value = checked\n    self.checkSubCells(ypCell, checked)\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.create_check_box_for_cell","title":"<code>create_check_box_for_cell(yp_cell, parent, columns=1)</code>","text":"<p>create a nicegui CheckBox for the given YpCell</p> <p>Parameters:</p> Name Type Description Default <code>yp_cell</code> <code>YpCell</code> <p>YpCell - the YpCell to create a checkbox for</p> required <code>parent</code> <p>the nicegui parent element</p> required <p>Returns:</p> Type Description <code>checkbox</code> <p>ui.checkbox: The created NiceGUI checkbox element.</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def create_check_box_for_cell(\n    self, yp_cell: YpCell, parent, columns: int = 1\n) -&gt; ui.checkbox:\n    \"\"\"\n    create a nicegui CheckBox for the given YpCell\n\n    Args:\n        yp_cell: YpCell - the YpCell to create a checkbox for\n        parent: the nicegui parent element\n        columns(int) the number of columns\n\n    Returns:\n        ui.checkbox: The created NiceGUI checkbox element.\n    \"\"\"\n    with parent:\n        yp_cell_card = ui.card()\n    label_text = yp_cell.getLabelText()\n    checkbox = self.create_simple_checkbox(\n        parent=yp_cell_card, label_text=label_text, title=label_text\n    )\n    yp_cell.getPage(self.solution.smwAccess)\n    color = \"blue\" if yp_cell.status == \"\u2705\" else \"red\"\n    link = f\"&lt;a href='{yp_cell.pageUrl}' style='color:{color}'&gt;{label_text}&lt;a&gt;\"\n    if yp_cell.status == \"\u24d8\":\n        link = f\"{label_text}\"\n    # in a one column setting we need to break link and status message\n    if columns == 1:\n        label_text = label_text.replace(\":\", \":&lt;br&gt;\")\n        delim = \"&lt;br&gt;\"\n    else:\n        delim = \"&amp;nbsp;\"\n    with yp_cell_card:\n        link_html = ui.html()\n        link_html.content = f\"{link}{delim}\"\n        debug_div = ui.html()\n        debug_div.content = f\"{yp_cell.statusMsg}\"\n        debug_div.visible = not self.cell_hide_size_info\n        status_div = ui.html()\n        status_div.content = yp_cell.status\n        checkbox.status_div = status_div\n        self.cell_debug_msg_divs.append(debug_div)\n    # link ypCell with check box via a unique identifier\n    yp_cell.checkbox_id = checkbox.id\n    self.ypcell_by_id[checkbox.id] = checkbox.id\n    self.checkbox_by_id[checkbox.id] = checkbox\n    yp_cell.ui_ready = True\n    return checkbox\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.create_simple_checkbox","title":"<code>create_simple_checkbox(parent, label_text, title, classes=None, on_change=None, **kwargs)</code>","text":"<p>Create a NiceGUI checkbox with a label and optional tooltip, adding it to the specified parent container.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <p>The parent UI element to attach the checkbox to. Must be a NiceGUI container.</p> required <code>label_text</code> <code>str</code> <p>The text label to display next to the checkbox.</p> required <code>title</code> <code>str</code> <p>The tooltip text to display when hovering over the checkbox.</p> required <code>classes</code> <code>str</code> <p>CSS classes for additional styling. If None, uses a default.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the checkbox.</p> <code>{}</code> <p>Returns:</p> Type Description <p>ui.checkbox: The created checkbox instance.</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def create_simple_checkbox(\n    self,\n    parent,\n    label_text: str,\n    title: str,\n    classes: str = None,\n    on_change: Callable = None,\n    **kwargs,\n):\n    \"\"\"\n    Create a NiceGUI checkbox with a label and optional tooltip, adding it to the specified parent container.\n\n    Args:\n        parent: The parent UI element to attach the checkbox to. Must be a NiceGUI container.\n        label_text (str): The text label to display next to the checkbox.\n        title (str): The tooltip text to display when hovering over the checkbox.\n        classes (str, optional): CSS classes for additional styling. If None, uses a default.\n        **kwargs: Additional keyword arguments to pass to the checkbox.\n\n    Returns:\n        ui.checkbox: The created checkbox instance.\n    \"\"\"\n    if classes is None:\n        classes = self.header_classes\n    with parent:\n        checkbox = ui.checkbox(\n            text=label_text,\n            on_change=on_change,\n            **kwargs,\n        )\n        checkbox.classes(classes)\n        checkbox.style(self.light_header_style)\n        checkbox.tooltip(title)\n    return checkbox\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.getCheckedYpCells","title":"<code>getCheckedYpCells()</code>","text":"<p>get all checked YpCells</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def getCheckedYpCells(self) -&gt; List[YpCell]:\n    \"\"\"\n    get all checked YpCells\n    \"\"\"\n    checkedYpCells = []\n    # generate in order of rows\n    for checkbox_row in self.checkboxes.values():\n        for checkbox, ypCell in checkbox_row.values():\n            if checkbox.value and ypCell.ui_ready:\n                checkedYpCells.append(ypCell)\n            for subCell in ypCell.subCells.values():\n                if subCell.ui_ready:\n                    checkbox = self.checkbox_by_id[subCell.checkbox_id]\n                    if checkbox.value:\n                        checkedYpCells.append(subCell)\n    return checkedYpCells\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.get_colums","title":"<code>get_colums(target)</code>","text":"<p>get the number of columns for the given target</p> <p>Parameters:</p> Name Type Description Default <code>target(Target)</code> <p>the target</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>the number of columns to be displayed</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def get_colums(self, target: Target) -&gt; int:\n    \"\"\"\n    get the number of columns for the given target\n\n    Args:\n        target(Target): the target\n\n    Returns:\n        int: the number of columns to be displayed\n    \"\"\"\n    cols = 2 if target.is_multi else 1\n    return cols\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.get_select","title":"<code>get_select(args)</code>","text":"<p>get the select from the sender's tooltip</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def get_select(self, args) -&gt; str:\n    \"\"\"\n    get the select from the sender's tooltip\n    \"\"\"\n    select = None\n    slots = args.sender.slots.get(\"default\")\n    if slots:\n        children = slots.children\n        if len(children) &gt; 0:\n            tooltip = children[0]\n            if isinstance(tooltip, Tooltip):\n                title = tooltip.text\n                select = title.replace(\"select all\", \"\").strip()\n    return select\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.onGenerateButtonClick","title":"<code>onGenerateButtonClick(_msg)</code>  <code>async</code>","text":"<p>react on the generate button having been clicked</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>async def onGenerateButtonClick(self, _msg):\n    \"\"\"\n    react on the generate button having been clicked\n    \"\"\"\n    cellsToGen = self.getCheckedYpCells()\n    total = len(cellsToGen)\n    ui.notify(f\"running {total} generator tasks\")\n    self.resetProgress(\"generating\", total)\n    await run.io_bound(self.generateCheckedCells, cellsToGen)\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.onParentCheckboxClick","title":"<code>onParentCheckboxClick(args)</code>  <code>async</code>","text":"<p>a ypCell checkbox has been clicked for a ypCell that has subCells</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>async def onParentCheckboxClick(self, args):\n    \"\"\"\n    a ypCell checkbox has been clicked for a ypCell that has subCells\n    \"\"\"\n    # get the parent checkbox\n    checkbox = args.sender\n    checked = args.value\n    # lookup the ypCell\n    ypCell = self.ypcell_by_id[checkbox.id]\n    self.checkSubCells(ypCell, checked)\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.on_select_all","title":"<code>on_select_all(args)</code>  <code>async</code>","text":"<p>react on \"select all\" being clicked</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>async def on_select_all(self, args):\n    \"\"\"\n    react on \"select all\" being clicked\n    \"\"\"\n    try:\n        checked = args.value\n        for checkbox_row in self.checkboxes.values():\n            self.check_row(checkbox_row, checked)\n    except BaseException as ex:\n        self.solution.handle_exception(ex)\n    pass\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.on_select_column","title":"<code>on_select_column(args)</code>  <code>async</code>","text":"<p>react on \"select all \" for a column being clicked</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>async def on_select_column(self, args):\n    \"\"\"\n    react on \"select all \" for a column being clicked\n    \"\"\"\n    try:\n        checked = args.value\n        target_name = self.get_select(args)\n        if target_name:\n            for checkboxes in self.checkboxes.values():\n                checkbox, ypCell = checkboxes[target_name]\n                self.check_ypcell_box(checkbox, ypCell, checked)\n    except BaseException as ex:\n        self.solution.handle_exception(ex)\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.on_select_row","title":"<code>on_select_row(args)</code>  <code>async</code>","text":"<p>react on \"select all \" for a row being clicked</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>async def on_select_row(self, args):\n    \"\"\"\n    react on \"select all \" for a row being clicked\n    \"\"\"\n    try:\n        checked = args.value\n        topic_name = self.get_select(args)\n        if topic_name:\n            checkbox_row = self.checkboxes[topic_name]\n            self.check_row(checkbox_row, checked)\n    except BaseException as ex:\n        self.solution.handle_exception(ex)\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.set_hide_show_status_of_cell_debug_msg","title":"<code>set_hide_show_status_of_cell_debug_msg(hidden=False)</code>","text":"<p>Sets the hidden status of all cell debug messages Args:     hidden: If True hide debug messages else show them</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def set_hide_show_status_of_cell_debug_msg(self, hidden: bool = False):\n    \"\"\"\n    Sets the hidden status of all cell debug messages\n    Args:\n        hidden: If True hide debug messages else show them\n    \"\"\"\n    try:\n        self.cell_hide_size_info = hidden\n        for div in self.cell_debug_msg_divs:\n            div.visible = not hidden\n        self.grid.update()\n    except Exception as ex:\n        self.solution.handle_exception(ex)\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.setup_styles","title":"<code>setup_styles()</code>","text":"<p>setup the styles for the ui</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def setup_styles(self):\n    \"\"\"\n    setup the styles for the ui\n    \"\"\"\n    self.header_classes = \"text-center\"\n    # centering\n    self.center_classes = \"flex flex-col items-center justify-center\"\n    # see https://www.materialpalette.com/indigo/indigo\n    # and https://github.com/WolfgangFahl/nicegui_widgets/blob/main/ngwidgets/color_schema.py\n    # light primary color\n    self.header_background = \"#c5cae9\"\n    #\n    self.light_header_background = \"#f5f5f5\"\n    self.bs_secondary = \"#6c757d\"\n    self.header_style = (\n        f\"font-size: 1.0rem;background-color: {self.header_background}\"\n    )\n    self.light_header_style = f\"background-color: {self.light_header_background}\"\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.setup_target_header_row","title":"<code>setup_target_header_row()</code>","text":"<p>setup the header row</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def setup_target_header_row(self):\n    \"\"\"\n    setup the header row\n    \"\"\"\n    with self.grid:\n        self.generateButton = ui.button(\n            icon=\"play_circle\", on_click=self.onGenerateButtonClick\n        )\n    self.targets_column_header = self.add_header_cell(\"Target\")\n    for target in self.displayTargets():\n        target_header_cell = self.add_header_cell(target.name)\n        with target_header_cell:\n            ui.icon(target.icon_name, size=self.iconSize, color=self.bs_secondary)\n            # &lt;i class=\"mdi mdi-archive\" style=\"color: rgb(108, 117, 125); font-size: 32px;\"&gt;&lt;/i&gt;\n            # markup+=f\"\"\"&lt;i class=\"mdi mdi-{target.icon_name}\" style=\"color: {self.bs_secondary};font-size:{self.iconSize};\"&gt;&lt;/i&gt;\"\"\"\n            # &lt;i class=\"q-icon notranslate material-icons\" aria-hidden=\"true\" role=\"presentation\" id=\"c48\"&gt;archive&lt;/i&gt;\n            # markup+=f\"\"\"&lt;i class=\"q-icon notranslate material-icons\" aria-hidden=\"true\" role=\"presentation\"&gt;{target.icon_name}&lt;/i&gt;\"\"\"\n            pass\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.setup_topic_header_row","title":"<code>setup_topic_header_row()</code>","text":"<p>setup the second header row</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def setup_topic_header_row(self):\n    \"\"\"\n    setup the second header row\n    \"\"\"\n    with self.grid:\n        self.topics_column_header = (\n            ui.html().classes(self.header_classes).style(self.header_style)\n        )\n        self.topics_column_header.content = \"&lt;strong&gt;Topics&lt;/strong&gt;\"\n    self.header_checkboxes = {}\n    self.header_checkboxes[\"all\"] = self.create_simple_checkbox(\n        parent=self.grid,\n        label_text=\"\u2198\",\n        title=\"select all\",\n        classes=self.center_classes,\n        on_change=self.on_select_all,\n    )\n    for target in self.displayTargets():\n        self.header_checkboxes[target.name] = self.create_simple_checkbox(\n            parent=self.grid,\n            label_text=\"\u2193\",\n            title=f\"select all {target.name}\",\n            classes=self.center_classes,\n            on_change=self.on_select_column,\n        )\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.setup_ui","title":"<code>setup_ui()</code>","text":"<p>setup the user interface</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def setup_ui(self):\n    \"\"\"\n    setup the user interface\n    \"\"\"\n    with self.parent:\n        target_columns = len(self.displayTargets())\n        # two more for the Topics and check box columns\n        target_columns += 2\n        self.grid = ui.grid(columns=target_columns).classes(\"w-full gap-0\")\n        self.setup_target_header_row()\n        self.setup_topic_header_row()\n</code></pre>"},{"location":"#yprinciple.gengrid.GeneratorGrid.updateProgress","title":"<code>updateProgress()</code>","text":"<p>update the progress</p> Source code in <code>yprinciple/gengrid.py</code> <pre><code>def updateProgress(self):\n    \"\"\"\n    update the progress\n    \"\"\"\n    self.solution.progressBar.update(1)\n    self.grid.update()\n</code></pre>"},{"location":"#yprinciple.profiler","title":"<code>profiler</code>","text":"<p>Created on 2022-11-18</p> <p>@author: wf</p>"},{"location":"#yprinciple.profiler.Profiler","title":"<code>Profiler</code>","text":"<p>simple profiler</p> Source code in <code>yprinciple/profiler.py</code> <pre><code>class Profiler:\n    \"\"\"\n    simple profiler\n    \"\"\"\n\n    def __init__(self, msg, profile=True):\n        \"\"\"\n        construct me with the given msg and profile active flag\n\n        Args:\n            msg(str): the message to show if profiling is active\n            profile(bool): True if messages should be shown\n        \"\"\"\n        self.msg = msg\n        self.profile = profile\n        self.starttime = time.time()\n        if profile:\n            print(f\"Starting {msg} ...\")\n\n    def time(self, extraMsg=\"\"):\n        \"\"\"\n        time the action and print if profile is active\n        \"\"\"\n        elapsed = time.time() - self.starttime\n        if self.profile:\n            print(f\"{self.msg}{extraMsg} took {elapsed:5.1f} s\")\n        return elapsed\n</code></pre>"},{"location":"#yprinciple.profiler.Profiler.__init__","title":"<code>__init__(msg, profile=True)</code>","text":"<p>construct me with the given msg and profile active flag</p> <p>Parameters:</p> Name Type Description Default <code>msg(str)</code> <p>the message to show if profiling is active</p> required <code>profile(bool)</code> <p>True if messages should be shown</p> required Source code in <code>yprinciple/profiler.py</code> <pre><code>def __init__(self, msg, profile=True):\n    \"\"\"\n    construct me with the given msg and profile active flag\n\n    Args:\n        msg(str): the message to show if profiling is active\n        profile(bool): True if messages should be shown\n    \"\"\"\n    self.msg = msg\n    self.profile = profile\n    self.starttime = time.time()\n    if profile:\n        print(f\"Starting {msg} ...\")\n</code></pre>"},{"location":"#yprinciple.profiler.Profiler.time","title":"<code>time(extraMsg='')</code>","text":"<p>time the action and print if profile is active</p> Source code in <code>yprinciple/profiler.py</code> <pre><code>def time(self, extraMsg=\"\"):\n    \"\"\"\n    time the action and print if profile is active\n    \"\"\"\n    elapsed = time.time() - self.starttime\n    if self.profile:\n        print(f\"{self.msg}{extraMsg} took {elapsed:5.1f} s\")\n    return elapsed\n</code></pre>"},{"location":"#yprinciple.smw_targets","title":"<code>smw_targets</code>","text":"<p>Created on 2022-11-26</p> <p>@author: wf</p>"},{"location":"#yprinciple.smw_targets.CategoryTarget","title":"<code>CategoryTarget</code>","text":"<p>               Bases: <code>SMWTarget</code></p> <p>the target to generate \"Category\" pages</p> <p>see https://wiki.bitplan.com/index.php/SiDIFTemplates#category</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class CategoryTarget(SMWTarget):\n    \"\"\"\n    the target to generate \"Category\" pages\n\n    see https://wiki.bitplan.com/index.php/SiDIFTemplates#category\n    \"\"\"\n\n    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate a category page for the given topic\n\n        e.g. https://wiki.bitplan.com/index.php/Category:Topic\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#category\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        markup = f\"\"\"__NOTOC__\n{{{{#ask: [[Topic name::{topic.name}]] | ?Topic wikiDocumentation= | mainlabel=-}}}}\n{topic.getPluralName()} may be added and edited with the form [[Form:{topic.name}]]\n* [[List of {topic.getPluralName()}]]\n&lt;div class=\"toccolours mw-collapsible mw-collapsed\" style=\"width:1024px\"&gt;\n{topic.name} {self.i18n(\"description\")}\n&lt;div class=\"mw-collapsible-content\"&gt;\n{self.uml(\"uml\",topic)}\n* [[Help:{topic.name}]]\n* [[Concept:{topic.name}]]\n* [[:Template:{topic.name}]]\n* [[:Form:{topic.name}]]\n=== Properties ===\n\"\"\"\n        for prop in topic.properties.values():\n            markup += f\"* [[Property:{topic.name} {prop.name}]]\\n\"\n        markup += \"\"\"&lt;/div&gt;\n&lt;/div&gt;\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.CategoryTarget.generate","title":"<code>generate(topic)</code>","text":"<p>generate a category page for the given topic</p> <p>e.g. https://wiki.bitplan.com/index.php/Category:Topic</p> <p>see https://wiki.bitplan.com/index.php/SiDIFTemplates#category</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Topic</code> <p>the topic to generate wiki markup for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the generated wiki markup</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate a category page for the given topic\n\n        e.g. https://wiki.bitplan.com/index.php/Category:Topic\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#category\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        markup = f\"\"\"__NOTOC__\n{{{{#ask: [[Topic name::{topic.name}]] | ?Topic wikiDocumentation= | mainlabel=-}}}}\n{topic.getPluralName()} may be added and edited with the form [[Form:{topic.name}]]\n* [[List of {topic.getPluralName()}]]\n&lt;div class=\"toccolours mw-collapsible mw-collapsed\" style=\"width:1024px\"&gt;\n{topic.name} {self.i18n(\"description\")}\n&lt;div class=\"mw-collapsible-content\"&gt;\n{self.uml(\"uml\",topic)}\n* [[Help:{topic.name}]]\n* [[Concept:{topic.name}]]\n* [[:Template:{topic.name}]]\n* [[:Form:{topic.name}]]\n=== Properties ===\n\"\"\"\n        for prop in topic.properties.values():\n            markup += f\"* [[Property:{topic.name} {prop.name}]]\\n\"\n        markup += \"\"\"&lt;/div&gt;\n&lt;/div&gt;\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.ConceptTarget","title":"<code>ConceptTarget</code>","text":"<p>               Bases: <code>SMWTarget</code></p> <p>the target to generate \"Concept\" pages</p> <p>see https://wiki.bitplan.com/index.php/SiDIFTemplates#concept</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class ConceptTarget(SMWTarget):\n    \"\"\"\n    the target to generate \"Concept\" pages\n\n    see https://wiki.bitplan.com/index.php/SiDIFTemplates#concept\n    \"\"\"\n\n    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate a result for the given topic\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#concept\n\n        Args:\n            topic(Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        conceptClause = (\n            f\"\"\"[[{topic.name} {topic.conceptProperty.name}::+]]\"\"\"\n            if hasattr(topic, \"conceptProperty\")\n            else f\"\"\"[[Category:{topic.name}]]\"\"\"\n        )\n        markup = f\"\"\"{{{{Topic\n|name={topic.name}\n|pluralName={topic.getPluralName()}\n|extends={topic.extends}\n|icon={topic.icon}\n|iconUrl={topic.iconUrl}\n|documentation={topic.documentation}\n|wikiDocumentation={topic.wikiDocumentation}\n|defaultstoremode={topic.defaultstoremode}\n|listLimit={topic.getListLimit()}\n|cargo={getattr(topic,\"cargo\",\"false\")}\n|context={topic.context}\n|storemode=property\n}}}}\n{{{{Topic\n|viewmode=masterdetail\n|storemode=none\n}}}}\n{{{{#forminput:form=Property|button text=add Property}}}}\n=== Documentation ===\n{topic.wikiDocumentation}\n{self.uml(\"uml\",topic)}\n\n{{{{#concept:\n{conceptClause}\n |{topic.pluralName}\n{self.seealso(topic)}\n}}}}\n[[Category:{topic.name}]]\n\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.ConceptTarget.generate","title":"<code>generate(topic)</code>","text":"<p>generate a result for the given topic</p> <p>see https://wiki.bitplan.com/index.php/SiDIFTemplates#concept</p> <p>Parameters:</p> Name Type Description Default <code>topic(Topic)</code> <p>the topic to generate wiki markup for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the generated wiki markup</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate a result for the given topic\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#concept\n\n        Args:\n            topic(Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        conceptClause = (\n            f\"\"\"[[{topic.name} {topic.conceptProperty.name}::+]]\"\"\"\n            if hasattr(topic, \"conceptProperty\")\n            else f\"\"\"[[Category:{topic.name}]]\"\"\"\n        )\n        markup = f\"\"\"{{{{Topic\n|name={topic.name}\n|pluralName={topic.getPluralName()}\n|extends={topic.extends}\n|icon={topic.icon}\n|iconUrl={topic.iconUrl}\n|documentation={topic.documentation}\n|wikiDocumentation={topic.wikiDocumentation}\n|defaultstoremode={topic.defaultstoremode}\n|listLimit={topic.getListLimit()}\n|cargo={getattr(topic,\"cargo\",\"false\")}\n|context={topic.context}\n|storemode=property\n}}}}\n{{{{Topic\n|viewmode=masterdetail\n|storemode=none\n}}}}\n{{{{#forminput:form=Property|button text=add Property}}}}\n=== Documentation ===\n{topic.wikiDocumentation}\n{self.uml(\"uml\",topic)}\n\n{{{{#concept:\n{conceptClause}\n |{topic.pluralName}\n{self.seealso(topic)}\n}}}}\n[[Category:{topic.name}]]\n\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.FormTarget","title":"<code>FormTarget</code>","text":"<p>               Bases: <code>SMWTarget</code></p> <p>the target to generate \"Form\" pages e.g. https://wiki.bitplan.com/index.php/Form:Topic</p> <p>see https://wiki.bitplan.com/index.php/SiDIFTemplates#form</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class FormTarget(SMWTarget):\n    \"\"\"\n    the target to generate \"Form\" pages\n    e.g. https://wiki.bitplan.com/index.php/Form:Topic\n\n    see https://wiki.bitplan.com/index.php/SiDIFTemplates#form\n\n    \"\"\"\n\n    def formTemplate(self, topic: Topic, isMultiple: bool):\n        \"\"\"\n        create the SMW pagefomrs markups for the given topic\n\n        Args:\n            topic (Topic): the topic to create the markup for\n            isMultiple (bool): True if there are multiple values allowed\n        \"\"\"\n        multiple = \"|multiple\" if isMultiple else \"\"\n        markup = f\"\"\"&lt;div id=\"wikiPreview\" style=\"display: none; padding-bottom: 25px; margin-bottom: 25px; border-bottom: 1px solid #AAAAAA;\"&gt;&lt;/div&gt;\n{{{{{{section|{topic.name}|level=1|hidden}}}}}}\n={topic.name}=\n{{{{{{for template|{topic.name}{multiple}}}}}}}\n{{| class=\"wikitable\"\n! colspan='2' | {topic.name}\n|-\n\"\"\"\n        for prop in topic.propertiesByIndex():\n            values_from_key = \"values from=\"\n            if prop.isLink:\n                prop.values_from = f\"{prop.topicLink.source}\"\n                prop.inputType = \"dropdown\"\n                values_from_key = \"values from concept=\"\n                pass\n            prop_type = getattr(prop, \"type\", \"Text\")\n            markup += f\"\"\"! {prop.label}:\n&lt;!-- {prop_type} {prop.name} --&gt;\\n\"\"\"\n            inputType = (\n                f\"|input type={prop.inputType}\"\n                if getattr(prop, \"inputType\", None)\n                else \"\"\n            )\n            if \"textarea\" == getattr(prop, \"inputType\", None):\n                inputType += \"|editor=wikieditor\"\n            size = f\"|size={prop.size}\" if getattr(prop, \"size\", None) else \"\"\n            mandatory = f\"|mandatory\" if getattr(prop, \"mandatory\", None) else \"\"\n            uploadable = f\"|uploadable\" if getattr(prop, \"uploadable\", None) else \"\"\n            size = f\"|size={prop.size}\" if getattr(prop, \"size\", None) else \"\"\n            values_from = (\n                f\"|{values_from_key}{prop.values_from}\"\n                if getattr(prop, \"values_from\", None)\n                else \"\"\n            )\n            defaultValue = (\n                f\"|default={prop.defaultValue}\"\n                if getattr(prop, \"defaultValue\", None)\n                else \"\"\n            )\n            allowedValues = (\n                f\"|values={prop.allowedValues}\"\n                if getattr(prop, \"allowedValues\", None)\n                else \"\"\n            )\n            markup += f\"\"\"|{{{{{{field|{prop.name}|property={topic.name} {prop.name}{inputType}{size}{mandatory}{uploadable}{values_from}{allowedValues}{defaultValue}}}}}}}\n|-\n\"\"\"\n        markup += f\"\"\"|-\n|}}\n{{{{{{field|storemode|default={topic.defaultstoremode}|hidden}}}}}}\n{{{{{{end template}}}}}}\n&lt;!-- {topic.name} --&gt;\n        \"\"\"\n        return markup\n\n    def generate(self, topic: Topic) -&gt; str:\n        \"\"\"\n        generate the form page for the given topic\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        multiple = \"subobject\" == topic.defaultstoremode\n        markup = f\"\"\"&lt;noinclude&gt;\nThis is the {self.profiWiki()}-Form for \"{topic.name}\".\n\nCreate a new {topic.name} by entering a new pagetitle for a {topic.name}\ninto the field below.\n\nIf you enter an existing {topic.name} pagetitle - you will edit the {topic.name}\nwith that pagetitle.\n{{{{#forminput:form={topic.name}|values from concept={topic.name}}}}}\n\n=== see also ===\n{self.seealso(topic)}\n&lt;/noinclude&gt;&lt;includeonly&gt;{self.formTemplate(topic,multiple)}\n\n{{{{{{section|Freitext|level=1|hidden}}}}}}\n=Freitext=\n{{{{{{standard input|free text|rows=10}}}}}}\n\n{{{{{{standard input|summary}}}}}}\n{{{{{{standard input|changes}}}}}}\n\n{{{{{{standard input|save}}}}}}\n{{{{{{standard input|cancel}}}}}}\n&lt;/includeonly&gt;\n        \"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.FormTarget.formTemplate","title":"<code>formTemplate(topic, isMultiple)</code>","text":"<p>create the SMW pagefomrs markups for the given topic</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Topic</code> <p>the topic to create the markup for</p> required <code>isMultiple</code> <code>bool</code> <p>True if there are multiple values allowed</p> required Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def formTemplate(self, topic: Topic, isMultiple: bool):\n        \"\"\"\n        create the SMW pagefomrs markups for the given topic\n\n        Args:\n            topic (Topic): the topic to create the markup for\n            isMultiple (bool): True if there are multiple values allowed\n        \"\"\"\n        multiple = \"|multiple\" if isMultiple else \"\"\n        markup = f\"\"\"&lt;div id=\"wikiPreview\" style=\"display: none; padding-bottom: 25px; margin-bottom: 25px; border-bottom: 1px solid #AAAAAA;\"&gt;&lt;/div&gt;\n{{{{{{section|{topic.name}|level=1|hidden}}}}}}\n={topic.name}=\n{{{{{{for template|{topic.name}{multiple}}}}}}}\n{{| class=\"wikitable\"\n! colspan='2' | {topic.name}\n|-\n\"\"\"\n        for prop in topic.propertiesByIndex():\n            values_from_key = \"values from=\"\n            if prop.isLink:\n                prop.values_from = f\"{prop.topicLink.source}\"\n                prop.inputType = \"dropdown\"\n                values_from_key = \"values from concept=\"\n                pass\n            prop_type = getattr(prop, \"type\", \"Text\")\n            markup += f\"\"\"! {prop.label}:\n&lt;!-- {prop_type} {prop.name} --&gt;\\n\"\"\"\n            inputType = (\n                f\"|input type={prop.inputType}\"\n                if getattr(prop, \"inputType\", None)\n                else \"\"\n            )\n            if \"textarea\" == getattr(prop, \"inputType\", None):\n                inputType += \"|editor=wikieditor\"\n            size = f\"|size={prop.size}\" if getattr(prop, \"size\", None) else \"\"\n            mandatory = f\"|mandatory\" if getattr(prop, \"mandatory\", None) else \"\"\n            uploadable = f\"|uploadable\" if getattr(prop, \"uploadable\", None) else \"\"\n            size = f\"|size={prop.size}\" if getattr(prop, \"size\", None) else \"\"\n            values_from = (\n                f\"|{values_from_key}{prop.values_from}\"\n                if getattr(prop, \"values_from\", None)\n                else \"\"\n            )\n            defaultValue = (\n                f\"|default={prop.defaultValue}\"\n                if getattr(prop, \"defaultValue\", None)\n                else \"\"\n            )\n            allowedValues = (\n                f\"|values={prop.allowedValues}\"\n                if getattr(prop, \"allowedValues\", None)\n                else \"\"\n            )\n            markup += f\"\"\"|{{{{{{field|{prop.name}|property={topic.name} {prop.name}{inputType}{size}{mandatory}{uploadable}{values_from}{allowedValues}{defaultValue}}}}}}}\n|-\n\"\"\"\n        markup += f\"\"\"|-\n|}}\n{{{{{{field|storemode|default={topic.defaultstoremode}|hidden}}}}}}\n{{{{{{end template}}}}}}\n&lt;!-- {topic.name} --&gt;\n        \"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.FormTarget.generate","title":"<code>generate(topic)</code>","text":"<p>generate the form page for the given topic</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Topic</code> <p>the topic to generate wiki markup for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the generated wiki markup</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def generate(self, topic: Topic) -&gt; str:\n        \"\"\"\n        generate the form page for the given topic\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        multiple = \"subobject\" == topic.defaultstoremode\n        markup = f\"\"\"&lt;noinclude&gt;\nThis is the {self.profiWiki()}-Form for \"{topic.name}\".\n\nCreate a new {topic.name} by entering a new pagetitle for a {topic.name}\ninto the field below.\n\nIf you enter an existing {topic.name} pagetitle - you will edit the {topic.name}\nwith that pagetitle.\n{{{{#forminput:form={topic.name}|values from concept={topic.name}}}}}\n\n=== see also ===\n{self.seealso(topic)}\n&lt;/noinclude&gt;&lt;includeonly&gt;{self.formTemplate(topic,multiple)}\n\n{{{{{{section|Freitext|level=1|hidden}}}}}}\n=Freitext=\n{{{{{{standard input|free text|rows=10}}}}}}\n\n{{{{{{standard input|summary}}}}}}\n{{{{{{standard input|changes}}}}}}\n\n{{{{{{standard input|save}}}}}}\n{{{{{{standard input|cancel}}}}}}\n&lt;/includeonly&gt;\n        \"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.HelpTarget","title":"<code>HelpTarget</code>","text":"<p>               Bases: <code>SMWTarget</code></p> <p>the help Target</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class HelpTarget(SMWTarget):\n    \"\"\"\n    the help Target\n    \"\"\"\n\n    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate a result for the given topic\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#help\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        markup = f\"\"\"[[File:Help_Icon.png|right]]\n== Help for {topic.name} ==\n{self.topicHeader(topic)}\n=== Documentation ===\n{topic.wikiDocumentation}\n=== Example {topic.pluralName} ===\n{{{{#ask: [[Concept:{topic.name}]]\n}}}}\n=== Properties ===\n{{{{#ask: [[Concept:Property]][[Property topic::Concept:{topic.name}]]\n| ?Property documentation = documentation\n| ?Property type = type\n| ?Property name = name\n| ?Property label = label\n| ?Property allowedValues = allowedValues\n| ?Property mandatory = mandatory\n| ?Property uploadable = uploadable\n|format=table\n}}}}\n{self.uml(\"uml\",topic)}\n{self.seealso(topic)}\n[[Category:{topic.name}]]\n\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.HelpTarget.generate","title":"<code>generate(topic)</code>","text":"<p>generate a result for the given topic</p> <p>see https://wiki.bitplan.com/index.php/SiDIFTemplates#help</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Topic</code> <p>the topic to generate wiki markup for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the generated wiki markup</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate a result for the given topic\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#help\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        markup = f\"\"\"[[File:Help_Icon.png|right]]\n== Help for {topic.name} ==\n{self.topicHeader(topic)}\n=== Documentation ===\n{topic.wikiDocumentation}\n=== Example {topic.pluralName} ===\n{{{{#ask: [[Concept:{topic.name}]]\n}}}}\n=== Properties ===\n{{{{#ask: [[Concept:Property]][[Property topic::Concept:{topic.name}]]\n| ?Property documentation = documentation\n| ?Property type = type\n| ?Property name = name\n| ?Property label = label\n| ?Property allowedValues = allowedValues\n| ?Property mandatory = mandatory\n| ?Property uploadable = uploadable\n|format=table\n}}}}\n{self.uml(\"uml\",topic)}\n{self.seealso(topic)}\n[[Category:{topic.name}]]\n\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.ListOfTarget","title":"<code>ListOfTarget</code>","text":"<p>               Bases: <code>SMWTarget</code></p> <p>the target to generate \"List of\" pages e.g. https://wiki.bitplan.com/index.php/List_of_Topics</p> <p>see https://wiki.bitplan.com/index.php/SiDIFTemplates#listof</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class ListOfTarget(SMWTarget):\n    \"\"\"\n    the target to generate \"List of\" pages\n    e.g. https://wiki.bitplan.com/index.php/List_of_Topics\n\n    see https://wiki.bitplan.com/index.php/SiDIFTemplates#listof\n\n    \"\"\"\n\n    def getPageTitle(self, modelElement) -&gt; str:\n        pageTitle = f\"List of {modelElement.pluralName}\"\n        return pageTitle\n\n    def generate(self, topic: Topic) -&gt; str:\n        \"\"\"\n        generate the list of page for the given topic\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        markup = f\"\"\"__NOCACHE__\n{self.topicHeader(topic)}\n== {topic.getPluralName()} ==\n{{{{#ask: [[Concept:{topic.name}]]|format=count}}}}\n{{{{#forminput:form={topic.name}|button text=add {topic.name}}}}}\n{topic.askQuery()}\n[[:Category:{topic.name}]]\n    \"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.ListOfTarget.generate","title":"<code>generate(topic)</code>","text":"<p>generate the list of page for the given topic</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Topic</code> <p>the topic to generate wiki markup for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the generated wiki markup</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def generate(self, topic: Topic) -&gt; str:\n        \"\"\"\n        generate the list of page for the given topic\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        markup = f\"\"\"__NOCACHE__\n{self.topicHeader(topic)}\n== {topic.getPluralName()} ==\n{{{{#ask: [[Concept:{topic.name}]]|format=count}}}}\n{{{{#forminput:form={topic.name}|button text=add {topic.name}}}}}\n{topic.askQuery()}\n[[:Category:{topic.name}]]\n    \"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.PropertyMultiTarget","title":"<code>PropertyMultiTarget</code>","text":"<p>               Bases: <code>SMWTarget</code></p> <p>the Property Multi Target</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class PropertyMultiTarget(SMWTarget):\n    \"\"\"\n    the Property Multi Target\n    \"\"\"\n\n    def addSubCells(self, ypCell: \"ypcell.YpCell\", topic: Topic, debug: bool = False):\n        \"\"\"\n        add the subcells for the given ypCell and topic\n\n        Args:\n            ypCell: the ypCell\n            topic (Topic): the topic to add subcells for\n        \"\"\"\n        for prop in topic.properties.values():\n            subCell = ypcell.YpCell(\n                modelElement=prop, target=self.subTarget, debug=debug\n            )\n            ypCell.subCells[prop.name] = subCell\n</code></pre>"},{"location":"#yprinciple.smw_targets.PropertyMultiTarget.addSubCells","title":"<code>addSubCells(ypCell, topic, debug=False)</code>","text":"<p>add the subcells for the given ypCell and topic</p> <p>Parameters:</p> Name Type Description Default <code>ypCell</code> <code>YpCell</code> <p>the ypCell</p> required <code>topic</code> <code>Topic</code> <p>the topic to add subcells for</p> required Source code in <code>yprinciple/smw_targets.py</code> <pre><code>def addSubCells(self, ypCell: \"ypcell.YpCell\", topic: Topic, debug: bool = False):\n    \"\"\"\n    add the subcells for the given ypCell and topic\n\n    Args:\n        ypCell: the ypCell\n        topic (Topic): the topic to add subcells for\n    \"\"\"\n    for prop in topic.properties.values():\n        subCell = ypcell.YpCell(\n            modelElement=prop, target=self.subTarget, debug=debug\n        )\n        ypCell.subCells[prop.name] = subCell\n</code></pre>"},{"location":"#yprinciple.smw_targets.PropertyTarget","title":"<code>PropertyTarget</code>","text":"<p>               Bases: <code>SMWTarget</code></p> <p>the Property Target</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class PropertyTarget(SMWTarget):\n    \"\"\"\n    the Property Target\n    \"\"\"\n\n    def getPageTitle(self, prop) -&gt; str:\n        \"\"\"\n        get the page title for the given property\n\n        Args:\n            prop: the Property to get the page title for\n\n        Returns:\n            str: the markup\n        \"\"\"\n        pageTitle = f\"{self.name}:{prop.topic} {prop.name}\"\n        return pageTitle\n\n    def generate(self, prop: Property) -&gt; str:\n        \"\"\"\n        generate wiki markup for the given property\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#propertiesdefs\n\n        Returns:\n            str: the wiki markup for the given property\n        \"\"\"\n        topic_name = prop.topic\n        topicWithConcept = f\"Concept:{topic_name}\"\n        markup = f\"\"\"{{{{Property\n|name={prop.name}\n|label={prop.label}\n        \"\"\"\n        if hasattr(prop, \"documentation\"):\n            markup += f\"\"\"|documentation={prop.documentation}\\n\"\"\"\n        prop_type = getattr(prop, \"type\", \"Text\")\n        markup += f\"\"\"|type=Special:Types/{prop_type}\n\"\"\"\n        # @TODO read from metamodel\n        for prop_name in [\n            \"index\",\n            \"sortPos\",\n            \"primaryKey\",\n            \"mandatory\",\n            \"namespace\",\n            \"size\",\n            \"uploadable\",\n            \"defaultValue\",\n            \"inputType\",\n            \"allowedValues\",\n            \"values_from\",\n            \"formatterURI\",\n            \"showInGrid\",\n            \"isLink\",\n        ]:\n            if hasattr(prop, prop_name):\n                value = getattr(prop, prop_name, None)\n                if value is not None:\n                    markup += f\"|{prop_name}={value}\\n\"\n                    # e.g. |index={prop.index}\n        markup += f\"\"\"|topic={(topicWithConcept)}\n|storemode=prop\n}}}}\n* [[Has type::{prop.type}]]\n\"\"\"\n        if hasattr(prop, \"formatterURI\"):\n            markup += f\"\"\"* External formatter uri: [[External formatter uri::{prop.formatterURI}]]\n\"\"\"\n        markup += f\"\"\"\nThis is a Property with type {{{{#show: {{{{FULLPAGENAMEE}}}} | ?Property type#- }}}}\n\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.PropertyTarget.generate","title":"<code>generate(prop)</code>","text":"<p>generate wiki markup for the given property</p> <p>see https://wiki.bitplan.com/index.php/SiDIFTemplates#propertiesdefs</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the wiki markup for the given property</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def generate(self, prop: Property) -&gt; str:\n        \"\"\"\n        generate wiki markup for the given property\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#propertiesdefs\n\n        Returns:\n            str: the wiki markup for the given property\n        \"\"\"\n        topic_name = prop.topic\n        topicWithConcept = f\"Concept:{topic_name}\"\n        markup = f\"\"\"{{{{Property\n|name={prop.name}\n|label={prop.label}\n        \"\"\"\n        if hasattr(prop, \"documentation\"):\n            markup += f\"\"\"|documentation={prop.documentation}\\n\"\"\"\n        prop_type = getattr(prop, \"type\", \"Text\")\n        markup += f\"\"\"|type=Special:Types/{prop_type}\n\"\"\"\n        # @TODO read from metamodel\n        for prop_name in [\n            \"index\",\n            \"sortPos\",\n            \"primaryKey\",\n            \"mandatory\",\n            \"namespace\",\n            \"size\",\n            \"uploadable\",\n            \"defaultValue\",\n            \"inputType\",\n            \"allowedValues\",\n            \"values_from\",\n            \"formatterURI\",\n            \"showInGrid\",\n            \"isLink\",\n        ]:\n            if hasattr(prop, prop_name):\n                value = getattr(prop, prop_name, None)\n                if value is not None:\n                    markup += f\"|{prop_name}={value}\\n\"\n                    # e.g. |index={prop.index}\n        markup += f\"\"\"|topic={(topicWithConcept)}\n|storemode=prop\n}}}}\n* [[Has type::{prop.type}]]\n\"\"\"\n        if hasattr(prop, \"formatterURI\"):\n            markup += f\"\"\"* External formatter uri: [[External formatter uri::{prop.formatterURI}]]\n\"\"\"\n        markup += f\"\"\"\nThis is a Property with type {{{{#show: {{{{FULLPAGENAMEE}}}} | ?Property type#- }}}}\n\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.PropertyTarget.getPageTitle","title":"<code>getPageTitle(prop)</code>","text":"<p>get the page title for the given property</p> <p>Parameters:</p> Name Type Description Default <code>prop</code> <p>the Property to get the page title for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the markup</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>def getPageTitle(self, prop) -&gt; str:\n    \"\"\"\n    get the page title for the given property\n\n    Args:\n        prop: the Property to get the page title for\n\n    Returns:\n        str: the markup\n    \"\"\"\n    pageTitle = f\"{self.name}:{prop.topic} {prop.name}\"\n    return pageTitle\n</code></pre>"},{"location":"#yprinciple.smw_targets.PythonTarget","title":"<code>PythonTarget</code>","text":"<p>               Bases: <code>SMWTarget</code></p> <p>generator for Python Code for a Topic</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class PythonTarget(SMWTarget):\n    \"\"\"\n    generator for Python Code for a Topic\n    \"\"\"\n\n    def pythonPropType(self, prop: Property) -&gt; str:\n        \"\"\"\n        get the python property type for the given Property\n        \"\"\"\n        ptype = \"str\"\n        typestr = prop.type\n        typestr = typestr.replace(\"Types/\", \"\")\n        if typestr == \"Boolean\":\n            ptype = \"bool\"\n        elif typestr == \"Number\":\n            ptype = \"float\"\n        return ptype\n\n    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate python code for the given topic\n        \"\"\"\n        markup = f'''from dataclasses import dataclass\nfrom typing import Optional\nimport dacite\n@dataclass\nclass {topic.name}:\n    \"\"\"\n    {topic.documentation}\n    \"\"\"\n    pageTitle:str\n'''\n\n        for prop in topic.propertiesByIndex():\n            markup += f\"\"\"    {prop.name}:Optional[{self.pythonPropType(prop)}] # {getattr(prop,\"documentation\",\"\")}\\n\"\"\"\n        markup += f'''\n    @classmethod\n    def askQuery(cls):\n        \"\"\"\n        get the ask Query for {topic.name}\n\n        Returns:\n            str: the mediawiki markup for the ask query\n        \"\"\"\n        ask=\"\"\"{topic.askQuery(mainlabel=\"pageTitle\",filterShowInGrid=False,listLimit=10000)}\"\"\"\n        return ask\n\n    @classmethod\n    def fromDict(cls,data:dict):\n        \"\"\"\n        create a {topic.name} from the given dict\n\n        Args:\n            data(dict): the dict to create the {topic.name} from\n\n        Returns:\n            {topic.name}: the freshly created {topic.name}\n        \"\"\"\n        {topic.name.lower()}=dacite.from_dict(data_class=cls,data=data)\n        return {topic.name.lower()}\n        '''\n\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.PythonTarget.generate","title":"<code>generate(topic)</code>","text":"<p>generate python code for the given topic</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate python code for the given topic\n        \"\"\"\n        markup = f'''from dataclasses import dataclass\nfrom typing import Optional\nimport dacite\n@dataclass\nclass {topic.name}:\n    \"\"\"\n    {topic.documentation}\n    \"\"\"\n    pageTitle:str\n'''\n\n        for prop in topic.propertiesByIndex():\n            markup += f\"\"\"    {prop.name}:Optional[{self.pythonPropType(prop)}] # {getattr(prop,\"documentation\",\"\")}\\n\"\"\"\n        markup += f'''\n    @classmethod\n    def askQuery(cls):\n        \"\"\"\n        get the ask Query for {topic.name}\n\n        Returns:\n            str: the mediawiki markup for the ask query\n        \"\"\"\n        ask=\"\"\"{topic.askQuery(mainlabel=\"pageTitle\",filterShowInGrid=False,listLimit=10000)}\"\"\"\n        return ask\n\n    @classmethod\n    def fromDict(cls,data:dict):\n        \"\"\"\n        create a {topic.name} from the given dict\n\n        Args:\n            data(dict): the dict to create the {topic.name} from\n\n        Returns:\n            {topic.name}: the freshly created {topic.name}\n        \"\"\"\n        {topic.name.lower()}=dacite.from_dict(data_class=cls,data=data)\n        return {topic.name.lower()}\n        '''\n\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.PythonTarget.pythonPropType","title":"<code>pythonPropType(prop)</code>","text":"<p>get the python property type for the given Property</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>def pythonPropType(self, prop: Property) -&gt; str:\n    \"\"\"\n    get the python property type for the given Property\n    \"\"\"\n    ptype = \"str\"\n    typestr = prop.type\n    typestr = typestr.replace(\"Types/\", \"\")\n    if typestr == \"Boolean\":\n        ptype = \"bool\"\n    elif typestr == \"Number\":\n        ptype = \"float\"\n    return ptype\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget","title":"<code>SMWTarget</code>","text":"<p>               Bases: <code>Target</code></p> <p>a specialized generation target for Semantic MediaWiki</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class SMWTarget(Target):\n    \"\"\"\n    a specialized generation target for Semantic MediaWiki\n    \"\"\"\n\n    @classmethod\n    def getSMWTargets(cls):\n        \"\"\"\n        define the targets\n        \"\"\"\n        targets = {\n            \"category\": CategoryTarget(\"Category\", \"archive\"),\n            \"concept\": ConceptTarget(\"Concept\", \"extension\"),\n            \"form\": FormTarget(\"Form\", \"note_alt\"),\n            \"help\": HelpTarget(\"Help\", \"help_center\"),\n            \"listOf\": ListOfTarget(\"List of\", \"format_list_bulleted\"),\n            \"template\": TemplateTarget(\"Template\", \"description\"),\n            \"properties\": PropertyMultiTarget(\n                \"Properties\", \"local_parking\", is_multi=True\n            ),\n            \"property\": PropertyTarget(\"Property\", showInGrid=False),\n            \"python\": PythonTarget(\"Python\", \"code\"),\n        }\n        for target_key, target in targets.items():\n            target.target_key = target_key\n        targets[\"properties\"].subTarget = targets[\"property\"]\n        return targets\n\n    def i18n(self, text: str) -&gt; str:\n        \"\"\"\n        return the internationalized version of the given text\n\n        Args:\n            text (str): the text to internationalize\n\n        Returns:\n            str: the internationalized version of the text\n        \"\"\"\n        # @TODO implement language support for non english wikis\n        return text\n\n    def topicHeader(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        get the topic header for the given topic\n\n        Args:\n            topic (Topic): the topic to generate a header for\n\n        Returns:\n            str: the markup to be generated\n        \"\"\"\n        markup = f\"\"\"{{{{#ask: [[Topic name::{topic.name}]]\n|mainlabel=-\n|?Topic icon = icon\n|? = Topic\n|?Topic name = name\n|?Topic pluralName = pluralName\n|?Topic documentation = documentation\n}}}}\n\"\"\"\n        return markup\n\n    def seealso(self, topic: Topic) -&gt; str:\n        \"\"\"\n        generate wiki markup to to show relevant links for a topic\n        \"\"\"\n        markup = f\"\"\"see also\n* [[List of {topic.pluralName}]]\n* [[Help:{topic.name}]]\n* [[Concept:{topic.name}]]\n* [[:Category:{topic.name}]]\n* [[:Template:{topic.name}]]\n* [[:Form:{topic.name}]]\n\"\"\"\n        topicLinks = topic.targetTopicLinks.values()\n        if len(topicLinks) &gt; 0:\n            markup += \"topic links:\\n\" \"\"\n            for topicLink in topicLinks:\n                markup += f\"* [[Concept:{topicLink.targetTopic.name}]]\\n\"\n        return markup\n\n    def copyright(self) -&gt; str:\n        \"\"\"\n        get the copyright markup\n\n        Returns:\n            str: the copyright markup\n        \"\"\"\n        currentYear = datetime.now().year\n        markup = f\"\"\"&lt;!--\n  --     Copyright (C) 2015-{currentYear} BITPlan GmbH\n  --\n  --     Pater-Delp-Str. -- 1\n  --     D-47877 -- Willich-Schiefbahn\n  --\n  --     http://www.bitplan.com\n  --\n  --\n--&gt;\"\"\"\n        return markup\n\n    def profiWiki(self) -&gt; str:\n        \"\"\"\n        markup for profiWiki\n        \"\"\"\n        markup = (\n            \"[https://wiki.bitplan.com/index.php/ProfiWiki BITPlan Y-Prinzip ProfiWiki]\"\n        )\n        return markup\n\n    def bitplanumlci(self, fontSize: int = 12) -&gt; str:\n        \"\"\"\n        create plantuml skin params for BITPlan corporate identity\n\n        Args:\n            fontSize (int): the font size to use\n\n        Returns:\n            str: the wiki markup to be generated\n        \"\"\"\n        currentYear = datetime.now().year\n        markup = f\"\"\"' BITPlan Corporate identity skin params\n' Copyright (c) 2015-{currentYear} BITPlan GmbH\n' see https://wiki.bitplan.com/index.php/PlantUmlSkinParams#BITPlanCI\n' skinparams generated by {Version.name}\n\"\"\"\n        skinparams = [\n            \"note\",\n            \"component\",\n            \"package\",\n            \"usecase\",\n            \"activity\",\n            \"classAttribute\",\n            \"interface\",\n            \"class\",\n            \"object\",\n        ]\n        for skinparam in skinparams:\n            markup += f\"\"\"skinparam {skinparam} {{\n  BackGroundColor #FFFFFF\n  FontSize {fontSize}\n  ArrowColor #FF8000\n  BorderColor #FF8000\n  FontColor black\n  FontName Technical\n}}\n\"\"\"\n        markup += \"\"\"hide Circle\n' end of skinparams '\"\"\"\n        return markup\n\n    def plantUmlRelation(self, topicLink: TopicLink) -&gt; str:\n        \"\"\"\n        generate wiki markup for a TopicLink/relation\n\n        Args:\n            topicLink (TopicLink): the topicLink to generate the relation for\n\n        Returns:\n            str: the wiki markup to generate\n        \"\"\"\n        sourceMany = \"*\" if topicLink.sourceMultiple else \"1\"\n        targetMany = \"*\" if topicLink.targetMultiple else \"1\"\n        markup = f\"\"\"{topicLink.source} \"{topicLink.sourceRole} ({sourceMany})\" -- \"{topicLink.targetRole}({targetMany})\" {topicLink.target}\\n\"\"\"\n        return markup\n\n    def uml(self, title: str, topic: \"Topic\", output_format: str = \"svg\") -&gt; str:\n        \"\"\"\n        get the uml (plantuml) markup for  the given topic\n\n        Args:\n            topic (Topic): the topic to generate a header for\n            output_format (str): the output format to use - default: svg\n\n        Returns:\n            str: the plantuml markup to be generated\n\n        \"\"\"\n        currentYear = datetime.now().year\n        markup = f\"\"\"=== {title} ===\n&lt;uml format='{output_format}'&gt;\ntitle {topic.name}\nnote as {topic.name}DiagramNote\nCopyright (c) 2015-{currentYear} BITPlan GmbH\n[[http://www.bitplan.com]]\nend note\nnote as {topic.name}Note\n{topic.documentation}\nend note\nclass {topic.name} {{\n\"\"\"\n        for prop in topic.properties.values():\n            prop_type = getattr(prop, \"type\", \"Text\")\n            markup += f\"  {prop_type} {prop.name}\\n\"\n        markup += f\"\"\"}}\n{topic.name}Note .. {topic.name}\n\"\"\"\n        # Relations/Topic Links\n        for topicLink in topic.sourceTopicLinks.values():\n            markup += f\"{self.plantUmlRelation(topicLink)}\"\n        for topicLink in topic.targetTopicLinks.values():\n            markup += f\"{self.plantUmlRelation(topicLink)}\"\n        markup += f\"\"\"{self.bitplanumlci(12)}\n&lt;/uml&gt;\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget.bitplanumlci","title":"<code>bitplanumlci(fontSize=12)</code>","text":"<p>create plantuml skin params for BITPlan corporate identity</p> <p>Parameters:</p> Name Type Description Default <code>fontSize</code> <code>int</code> <p>the font size to use</p> <code>12</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the wiki markup to be generated</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def bitplanumlci(self, fontSize: int = 12) -&gt; str:\n        \"\"\"\n        create plantuml skin params for BITPlan corporate identity\n\n        Args:\n            fontSize (int): the font size to use\n\n        Returns:\n            str: the wiki markup to be generated\n        \"\"\"\n        currentYear = datetime.now().year\n        markup = f\"\"\"' BITPlan Corporate identity skin params\n' Copyright (c) 2015-{currentYear} BITPlan GmbH\n' see https://wiki.bitplan.com/index.php/PlantUmlSkinParams#BITPlanCI\n' skinparams generated by {Version.name}\n\"\"\"\n        skinparams = [\n            \"note\",\n            \"component\",\n            \"package\",\n            \"usecase\",\n            \"activity\",\n            \"classAttribute\",\n            \"interface\",\n            \"class\",\n            \"object\",\n        ]\n        for skinparam in skinparams:\n            markup += f\"\"\"skinparam {skinparam} {{\n  BackGroundColor #FFFFFF\n  FontSize {fontSize}\n  ArrowColor #FF8000\n  BorderColor #FF8000\n  FontColor black\n  FontName Technical\n}}\n\"\"\"\n        markup += \"\"\"hide Circle\n' end of skinparams '\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget.copyright","title":"<code>copyright()</code>","text":"<p>get the copyright markup</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the copyright markup</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def copyright(self) -&gt; str:\n        \"\"\"\n        get the copyright markup\n\n        Returns:\n            str: the copyright markup\n        \"\"\"\n        currentYear = datetime.now().year\n        markup = f\"\"\"&lt;!--\n  --     Copyright (C) 2015-{currentYear} BITPlan GmbH\n  --\n  --     Pater-Delp-Str. -- 1\n  --     D-47877 -- Willich-Schiefbahn\n  --\n  --     http://www.bitplan.com\n  --\n  --\n--&gt;\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget.getSMWTargets","title":"<code>getSMWTargets()</code>  <code>classmethod</code>","text":"<p>define the targets</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>@classmethod\ndef getSMWTargets(cls):\n    \"\"\"\n    define the targets\n    \"\"\"\n    targets = {\n        \"category\": CategoryTarget(\"Category\", \"archive\"),\n        \"concept\": ConceptTarget(\"Concept\", \"extension\"),\n        \"form\": FormTarget(\"Form\", \"note_alt\"),\n        \"help\": HelpTarget(\"Help\", \"help_center\"),\n        \"listOf\": ListOfTarget(\"List of\", \"format_list_bulleted\"),\n        \"template\": TemplateTarget(\"Template\", \"description\"),\n        \"properties\": PropertyMultiTarget(\n            \"Properties\", \"local_parking\", is_multi=True\n        ),\n        \"property\": PropertyTarget(\"Property\", showInGrid=False),\n        \"python\": PythonTarget(\"Python\", \"code\"),\n    }\n    for target_key, target in targets.items():\n        target.target_key = target_key\n    targets[\"properties\"].subTarget = targets[\"property\"]\n    return targets\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget.i18n","title":"<code>i18n(text)</code>","text":"<p>return the internationalized version of the given text</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>the text to internationalize</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the internationalized version of the text</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>def i18n(self, text: str) -&gt; str:\n    \"\"\"\n    return the internationalized version of the given text\n\n    Args:\n        text (str): the text to internationalize\n\n    Returns:\n        str: the internationalized version of the text\n    \"\"\"\n    # @TODO implement language support for non english wikis\n    return text\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget.plantUmlRelation","title":"<code>plantUmlRelation(topicLink)</code>","text":"<p>generate wiki markup for a TopicLink/relation</p> <p>Parameters:</p> Name Type Description Default <code>topicLink</code> <code>TopicLink</code> <p>the topicLink to generate the relation for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the wiki markup to generate</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>def plantUmlRelation(self, topicLink: TopicLink) -&gt; str:\n    \"\"\"\n    generate wiki markup for a TopicLink/relation\n\n    Args:\n        topicLink (TopicLink): the topicLink to generate the relation for\n\n    Returns:\n        str: the wiki markup to generate\n    \"\"\"\n    sourceMany = \"*\" if topicLink.sourceMultiple else \"1\"\n    targetMany = \"*\" if topicLink.targetMultiple else \"1\"\n    markup = f\"\"\"{topicLink.source} \"{topicLink.sourceRole} ({sourceMany})\" -- \"{topicLink.targetRole}({targetMany})\" {topicLink.target}\\n\"\"\"\n    return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget.profiWiki","title":"<code>profiWiki()</code>","text":"<p>markup for profiWiki</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>def profiWiki(self) -&gt; str:\n    \"\"\"\n    markup for profiWiki\n    \"\"\"\n    markup = (\n        \"[https://wiki.bitplan.com/index.php/ProfiWiki BITPlan Y-Prinzip ProfiWiki]\"\n    )\n    return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget.seealso","title":"<code>seealso(topic)</code>","text":"<p>generate wiki markup to to show relevant links for a topic</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def seealso(self, topic: Topic) -&gt; str:\n        \"\"\"\n        generate wiki markup to to show relevant links for a topic\n        \"\"\"\n        markup = f\"\"\"see also\n* [[List of {topic.pluralName}]]\n* [[Help:{topic.name}]]\n* [[Concept:{topic.name}]]\n* [[:Category:{topic.name}]]\n* [[:Template:{topic.name}]]\n* [[:Form:{topic.name}]]\n\"\"\"\n        topicLinks = topic.targetTopicLinks.values()\n        if len(topicLinks) &gt; 0:\n            markup += \"topic links:\\n\" \"\"\n            for topicLink in topicLinks:\n                markup += f\"* [[Concept:{topicLink.targetTopic.name}]]\\n\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget.topicHeader","title":"<code>topicHeader(topic)</code>","text":"<p>get the topic header for the given topic</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Topic</code> <p>the topic to generate a header for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the markup to be generated</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def topicHeader(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        get the topic header for the given topic\n\n        Args:\n            topic (Topic): the topic to generate a header for\n\n        Returns:\n            str: the markup to be generated\n        \"\"\"\n        markup = f\"\"\"{{{{#ask: [[Topic name::{topic.name}]]\n|mainlabel=-\n|?Topic icon = icon\n|? = Topic\n|?Topic name = name\n|?Topic pluralName = pluralName\n|?Topic documentation = documentation\n}}}}\n\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.SMWTarget.uml","title":"<code>uml(title, topic, output_format='svg')</code>","text":"<p>get the uml (plantuml) markup for  the given topic</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Topic</code> <p>the topic to generate a header for</p> required <code>output_format</code> <code>str</code> <p>the output format to use - default: svg</p> <code>'svg'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the plantuml markup to be generated</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def uml(self, title: str, topic: \"Topic\", output_format: str = \"svg\") -&gt; str:\n        \"\"\"\n        get the uml (plantuml) markup for  the given topic\n\n        Args:\n            topic (Topic): the topic to generate a header for\n            output_format (str): the output format to use - default: svg\n\n        Returns:\n            str: the plantuml markup to be generated\n\n        \"\"\"\n        currentYear = datetime.now().year\n        markup = f\"\"\"=== {title} ===\n&lt;uml format='{output_format}'&gt;\ntitle {topic.name}\nnote as {topic.name}DiagramNote\nCopyright (c) 2015-{currentYear} BITPlan GmbH\n[[http://www.bitplan.com]]\nend note\nnote as {topic.name}Note\n{topic.documentation}\nend note\nclass {topic.name} {{\n\"\"\"\n        for prop in topic.properties.values():\n            prop_type = getattr(prop, \"type\", \"Text\")\n            markup += f\"  {prop_type} {prop.name}\\n\"\n        markup += f\"\"\"}}\n{topic.name}Note .. {topic.name}\n\"\"\"\n        # Relations/Topic Links\n        for topicLink in topic.sourceTopicLinks.values():\n            markup += f\"{self.plantUmlRelation(topicLink)}\"\n        for topicLink in topic.targetTopicLinks.values():\n            markup += f\"{self.plantUmlRelation(topicLink)}\"\n        markup += f\"\"\"{self.bitplanumlci(12)}\n&lt;/uml&gt;\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.TemplateTarget","title":"<code>TemplateTarget</code>","text":"<p>               Bases: <code>SMWTarget</code></p> <p>the template Target</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>class TemplateTarget(SMWTarget):\n    \"\"\"\n    the template Target\n    \"\"\"\n\n    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate a template for the given topic\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#template\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        markup = f\"\"\"&lt;noinclude&gt;{self.copyright()}\nThis is the {self.profiWiki()}-Template for \"{topic.name}\".\n=== see also ===\n{self.seealso(topic)}\n=== Usage ===\n&lt;pre&gt;{{{{{topic.name}\n\"\"\"\n        for prop in topic.properties.values():\n            markup += f\"|{prop.name}=\\n\"\n        markup += f\"\"\"|storemode=property or subobject or none\"\n}}}}\n&lt;/pre&gt;\n[[Category:Template]]\n&lt;/noinclude&gt;&lt;includeonly&gt;{{{{#switch:{{{{{{storemode|}}}}}}\n|none=\n|subobject={{{{#subobject:-\n|isA={topic.name}\n\"\"\"\n        for prop in topic.properties.values():\n            markup += f\"|{topic.name} {prop.name}={{{{{{{prop.name}|}}}}}}\\n\"\n        markup += f\"\"\"}}}}\n|#default={{{{#set:\n|isA={topic.name}\n\"\"\"\n        for prop in topic.properties.values():\n            # separator handling\n            sep = \"\"\n            if prop.isLink:\n                tl = prop.topicLink\n                if hasattr(tl, \"separator\"):\n                    sep = f\"|+sep={tl.separator}\"\n            markup += f\"|{topic.name} {prop.name}={{{{{{{prop.name}|}}}}}}{sep}\\n\"\n        markup += f\"\"\"}}}}\\n\"\"\"  # end of #set\n        markup += f\"\"\"}}}}\\n\"\"\"  # end of #switch\n        markup += f\"\"\"{{{{#switch:{{{{{{viewmode|}}}}}}\"\"\"\n        markup += \"|hidden=\"\n        markup += \"|masterdetail=\\n\"\n        for topicLink in topic.sourceTopicLinks.values():\n            if topicLink.targetTopic:\n                markup += f\"= {topicLink.targetRole} =\\n\"\n                markup += f\"{{{{#ask:[[Concept:{topicLink.targetTopic.name}]]\"\n                markup += f\"[[{topicLink.targetTopic.name} {topicLink.sourceRole}::{{{{FULLPAGENAME}}}}]]\\n\"\n                for prop in topicLink.targetTopic.propertiesByIndex():\n                    markup += (\n                        f\"| ?{topicLink.targetTopic.name} {prop.name} = {prop.name}\\n\"\n                    )\n                    pass\n                markup += f\"}}}}\"  # end #ask\n                pass\n        markup += \"|#default=\"\n        markup += f\"\"\"{{{{{{!}}}} class='wikitable'\n! colspan='2' {{{{!}}}}{topic.name}\n{{{{!}}}}-\n{{{{#switch:{{{{{{storemode|}}}}}}|property=\n! colspan='2' style='text-align:left' {{{{!}}}} {{{{Icon|name=edit|size=24}}}}{{{{Link|target=Special:FormEdit/{topic.name}/{{{{FULLPAGENAME}}}}|title=edit}}}}\n{{{{!}}}}-\n}}}}\n\"\"\"\n        for prop in topic.properties.values():\n            # https://github.com/WolfgangFahl/py-yprinciple-gen/issues/13\n            # show Links for external Identifiers in templates\n            prop_type = getattr(prop, \"type\", \"Text\")\n            if prop_type == \"External identifier\" or prop.isLink:\n                link_markup = (\n                    \"\u2192{{#show: {{FULLPAGENAME}}|\" + f\"?{topic.name} {prop.name}\" + \"}}\"\n                )\n                pass\n            elif prop_type == \"Page\":\n                link_markup = f\"\u2192[[{{{{{{{prop.name}|}}}}}}]]\"\n            else:\n                link_markup = \"\"\n            markup += f\"\"\"![[Property:{topic.name} {prop.name}|{prop.name}]]\n{{{{!}}}}&amp;nbsp;{{{{#if:{{{{{{{prop.name}|}}}}}}|{{{{{{{prop.name}}}}}}}|}}}}{link_markup}\n{{{{!}}}}-\\n\"\"\"\n        markup += f\"{{{{!}}}}}}\\n\"  # end of table\n        markup += f\"\"\"}}}}\\n\"\"\"  # end of #switch viewmode\n\n        if hasattr(topic, \"defaultstoremode\"):\n            if topic.defaultstoremode == \"property\":\n                markup += (\n                    f\"[[Category:{topic.name}]]{{{{#default_form:{topic.name}}}}}\\n\"\n                )\n\n        markup += \"\"\"&lt;/includeonly&gt;\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.smw_targets.TemplateTarget.generate","title":"<code>generate(topic)</code>","text":"<p>generate a template for the given topic</p> <p>see https://wiki.bitplan.com/index.php/SiDIFTemplates#template</p> <p>Parameters:</p> Name Type Description Default <code>topic</code> <code>Topic</code> <p>the topic to generate wiki markup for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the generated wiki markup</p> Source code in <code>yprinciple/smw_targets.py</code> <pre><code>    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate a template for the given topic\n\n        see https://wiki.bitplan.com/index.php/SiDIFTemplates#template\n\n        Args:\n            topic (Topic): the topic to generate wiki markup for\n\n        Returns:\n            str: the generated wiki markup\n        \"\"\"\n        markup = f\"\"\"&lt;noinclude&gt;{self.copyright()}\nThis is the {self.profiWiki()}-Template for \"{topic.name}\".\n=== see also ===\n{self.seealso(topic)}\n=== Usage ===\n&lt;pre&gt;{{{{{topic.name}\n\"\"\"\n        for prop in topic.properties.values():\n            markup += f\"|{prop.name}=\\n\"\n        markup += f\"\"\"|storemode=property or subobject or none\"\n}}}}\n&lt;/pre&gt;\n[[Category:Template]]\n&lt;/noinclude&gt;&lt;includeonly&gt;{{{{#switch:{{{{{{storemode|}}}}}}\n|none=\n|subobject={{{{#subobject:-\n|isA={topic.name}\n\"\"\"\n        for prop in topic.properties.values():\n            markup += f\"|{topic.name} {prop.name}={{{{{{{prop.name}|}}}}}}\\n\"\n        markup += f\"\"\"}}}}\n|#default={{{{#set:\n|isA={topic.name}\n\"\"\"\n        for prop in topic.properties.values():\n            # separator handling\n            sep = \"\"\n            if prop.isLink:\n                tl = prop.topicLink\n                if hasattr(tl, \"separator\"):\n                    sep = f\"|+sep={tl.separator}\"\n            markup += f\"|{topic.name} {prop.name}={{{{{{{prop.name}|}}}}}}{sep}\\n\"\n        markup += f\"\"\"}}}}\\n\"\"\"  # end of #set\n        markup += f\"\"\"}}}}\\n\"\"\"  # end of #switch\n        markup += f\"\"\"{{{{#switch:{{{{{{viewmode|}}}}}}\"\"\"\n        markup += \"|hidden=\"\n        markup += \"|masterdetail=\\n\"\n        for topicLink in topic.sourceTopicLinks.values():\n            if topicLink.targetTopic:\n                markup += f\"= {topicLink.targetRole} =\\n\"\n                markup += f\"{{{{#ask:[[Concept:{topicLink.targetTopic.name}]]\"\n                markup += f\"[[{topicLink.targetTopic.name} {topicLink.sourceRole}::{{{{FULLPAGENAME}}}}]]\\n\"\n                for prop in topicLink.targetTopic.propertiesByIndex():\n                    markup += (\n                        f\"| ?{topicLink.targetTopic.name} {prop.name} = {prop.name}\\n\"\n                    )\n                    pass\n                markup += f\"}}}}\"  # end #ask\n                pass\n        markup += \"|#default=\"\n        markup += f\"\"\"{{{{{{!}}}} class='wikitable'\n! colspan='2' {{{{!}}}}{topic.name}\n{{{{!}}}}-\n{{{{#switch:{{{{{{storemode|}}}}}}|property=\n! colspan='2' style='text-align:left' {{{{!}}}} {{{{Icon|name=edit|size=24}}}}{{{{Link|target=Special:FormEdit/{topic.name}/{{{{FULLPAGENAME}}}}|title=edit}}}}\n{{{{!}}}}-\n}}}}\n\"\"\"\n        for prop in topic.properties.values():\n            # https://github.com/WolfgangFahl/py-yprinciple-gen/issues/13\n            # show Links for external Identifiers in templates\n            prop_type = getattr(prop, \"type\", \"Text\")\n            if prop_type == \"External identifier\" or prop.isLink:\n                link_markup = (\n                    \"\u2192{{#show: {{FULLPAGENAME}}|\" + f\"?{topic.name} {prop.name}\" + \"}}\"\n                )\n                pass\n            elif prop_type == \"Page\":\n                link_markup = f\"\u2192[[{{{{{{{prop.name}|}}}}}}]]\"\n            else:\n                link_markup = \"\"\n            markup += f\"\"\"![[Property:{topic.name} {prop.name}|{prop.name}]]\n{{{{!}}}}&amp;nbsp;{{{{#if:{{{{{{{prop.name}|}}}}}}|{{{{{{{prop.name}}}}}}}|}}}}{link_markup}\n{{{{!}}}}-\\n\"\"\"\n        markup += f\"{{{{!}}}}}}\\n\"  # end of table\n        markup += f\"\"\"}}}}\\n\"\"\"  # end of #switch viewmode\n\n        if hasattr(topic, \"defaultstoremode\"):\n            if topic.defaultstoremode == \"property\":\n                markup += (\n                    f\"[[Category:{topic.name}]]{{{{#default_form:{topic.name}}}}}\\n\"\n                )\n\n        markup += \"\"\"&lt;/includeonly&gt;\"\"\"\n        return markup\n</code></pre>"},{"location":"#yprinciple.target","title":"<code>target</code>","text":"<p>Created on 2022-11-25</p> <p>@author: wf</p>"},{"location":"#yprinciple.target.Target","title":"<code>Target</code>","text":"<p>a generator Target on the technical side of the Y-Principle</p> Source code in <code>yprinciple/target.py</code> <pre><code>class Target:\n    \"\"\"\n    a generator Target on the technical side of the Y-Principle\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        icon_name: str = \"bullseye\",\n        is_multi: bool = False,\n        is_subtarget: bool = False,\n        showInGrid: bool = True,\n    ):\n        \"\"\"\n        constructor\n        name(str): the name of the target\n        icon_name(str): the icon_name of the target\n        is_multi(bool): if True this target creates a list of results (has subtargets)\n        showInGrid(bool): if True this target is to be shown in the generator Grid\n\n        \"\"\"\n        self.name = name\n        self.icon_name = icon_name\n        self.is_multi = is_multi\n        self.showInGrid = showInGrid\n        self.subTarget = None\n\n    def getLabelText(self, modelElement) -&gt; str:\n        return self.getPageTitle(modelElement)\n\n    def getPageTitle(self, modelElement) -&gt; str:\n        pageTitle = f\"{self.name}:{modelElement.name}\"\n        return pageTitle\n\n    def getFileName(self, modelElement, purpose: str, fixcolon: bool = False) -&gt; str:\n        \"\"\"\n        get the filename for the given modelElement and purpose\n\n        Args:\n            modelElement:\n            purpose(str): the purpose e.g. Help/Category ...\n\n        Returns:\n            str: a file name\n        \"\"\"\n        prefix = self.getPageTitle(modelElement)\n        # workaround for macos\n        # https://apple.stackexchange.com/questions/173529/when-did-the-colon-character-become-an-allowed-character-in-the-filesystem\n        if fixcolon:\n            prefix = prefix.replace(\":\", \"\uff5c\")\n        prefix = prefix.replace(\" \", \"_\")\n        filename = f\"{prefix}{purpose}.wiki\"\n        return filename\n\n    def generate(self, topic: \"Topic\") -&gt; str:\n        \"\"\"\n        generate a result for the given topic\n        \"\"\"\n        raise Exception(f\"No generator available for target {self.name}\")\n</code></pre>"},{"location":"#yprinciple.target.Target.__init__","title":"<code>__init__(name, icon_name='bullseye', is_multi=False, is_subtarget=False, showInGrid=True)</code>","text":"<p>constructor name(str): the name of the target icon_name(str): the icon_name of the target is_multi(bool): if True this target creates a list of results (has subtargets) showInGrid(bool): if True this target is to be shown in the generator Grid</p> Source code in <code>yprinciple/target.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    icon_name: str = \"bullseye\",\n    is_multi: bool = False,\n    is_subtarget: bool = False,\n    showInGrid: bool = True,\n):\n    \"\"\"\n    constructor\n    name(str): the name of the target\n    icon_name(str): the icon_name of the target\n    is_multi(bool): if True this target creates a list of results (has subtargets)\n    showInGrid(bool): if True this target is to be shown in the generator Grid\n\n    \"\"\"\n    self.name = name\n    self.icon_name = icon_name\n    self.is_multi = is_multi\n    self.showInGrid = showInGrid\n    self.subTarget = None\n</code></pre>"},{"location":"#yprinciple.target.Target.generate","title":"<code>generate(topic)</code>","text":"<p>generate a result for the given topic</p> Source code in <code>yprinciple/target.py</code> <pre><code>def generate(self, topic: \"Topic\") -&gt; str:\n    \"\"\"\n    generate a result for the given topic\n    \"\"\"\n    raise Exception(f\"No generator available for target {self.name}\")\n</code></pre>"},{"location":"#yprinciple.target.Target.getFileName","title":"<code>getFileName(modelElement, purpose, fixcolon=False)</code>","text":"<p>get the filename for the given modelElement and purpose</p> <p>Parameters:</p> Name Type Description Default <code>modelElement</code> required <code>purpose(str)</code> <p>the purpose e.g. Help/Category ...</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a file name</p> Source code in <code>yprinciple/target.py</code> <pre><code>def getFileName(self, modelElement, purpose: str, fixcolon: bool = False) -&gt; str:\n    \"\"\"\n    get the filename for the given modelElement and purpose\n\n    Args:\n        modelElement:\n        purpose(str): the purpose e.g. Help/Category ...\n\n    Returns:\n        str: a file name\n    \"\"\"\n    prefix = self.getPageTitle(modelElement)\n    # workaround for macos\n    # https://apple.stackexchange.com/questions/173529/when-did-the-colon-character-become-an-allowed-character-in-the-filesystem\n    if fixcolon:\n        prefix = prefix.replace(\":\", \"\uff5c\")\n    prefix = prefix.replace(\" \", \"_\")\n    filename = f\"{prefix}{purpose}.wiki\"\n    return filename\n</code></pre>"},{"location":"#yprinciple.version","title":"<code>version</code>","text":"<p>Created on 2022-04-01</p> <p>@author: wf</p>"},{"location":"#yprinciple.version.Version","title":"<code>Version</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Version handling for pysotsog</p> Source code in <code>yprinciple/version.py</code> <pre><code>@dataclass\nclass Version(object):\n    \"\"\"\n    Version handling for pysotsog\n    \"\"\"\n\n    name = \"py-yprinciple-gen\"\n    description = \"python Y-Principle generator\"\n    version = yprinciple.__version__\n    date = \"2022-11-24\"\n    updated = \"2024-08-03\"\n    authors = \"Wolfgang Fahl\"\n    doc_url = \"https://wiki.bitplan.com/index.php/Py-yprinciple-gen\"\n    chat_url = \"https://github.com/WolfgangFahl/py-yprinciple-gen/discussions\"\n    cm_url = \"https://github.com/WolfgangFahl/py-yprinciple-gen\"\n    license = f\"\"\"Copyright 2022-2024 contributors. All rights reserved.\n  Licensed under the Apache License 2.0\n  http://www.apache.org/licenses/LICENSE-2.0\n  Distributed on an \"AS IS\" basis without warranties\n  or conditions of any kind, either express or implied.\"\"\"\n    longDescription = f\"\"\"{name} version {version}\n{description}\n  Created by {authors} on {date} last updated {updated}\"\"\"\n</code></pre>"},{"location":"#yprinciple.ypcell","title":"<code>ypcell</code>","text":"<p>Created on 2022-11-25</p> <p>@author: wf</p>"},{"location":"#yprinciple.ypcell.GenResult","title":"<code>GenResult</code>  <code>dataclass</code>","text":"<p>generator Result</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>@dataclass\nclass GenResult:\n    \"\"\"\n    generator Result\n    \"\"\"\n\n    # markup for new page\n    markup: str\n</code></pre>"},{"location":"#yprinciple.ypcell.MwGenResult","title":"<code>MwGenResult</code>  <code>dataclass</code>","text":"<p>               Bases: <code>GenResult</code></p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>@dataclass\nclass MwGenResult(GenResult):\n    # changes made\n    markup_diff: str\n    # @TODO use correct typing for MwClient Page object (pywikibot compatible?)\n    old_page: object\n    new_page: object\n\n    def getDiffUrl(self) -&gt; typing.Union[str, None]:\n        \"\"\"\n        get the diff url of the two pages (if any)\n\n        Returns:\n            str: the url of the diff\n        \"\"\"\n        diff_url = None\n        if self.old_page and self.new_page:\n            oldid = self.old_page.revision\n            newid = self.new_page.revision\n            site = self.new_page.site\n            diff_url = f\"{site.scheme}://{site.host}{site.path}index.php?title={self.new_page.page_title}&amp;type=revision&amp;diff={newid}&amp;oldid={oldid}\"\n            pass\n        return diff_url\n\n    def page_changed(self) -&gt; bool:\n        \"\"\"\n        Check if changes were applied to the new page\n        Returns:\n            bool: True if the content of the page changed otherwise False\n        \"\"\"\n        old_revision_id = getattr(self.old_page, \"revision\", None)\n        new_revision_id = getattr(self.new_page, \"revision\", None)\n        return old_revision_id != new_revision_id\n</code></pre>"},{"location":"#yprinciple.ypcell.MwGenResult.getDiffUrl","title":"<code>getDiffUrl()</code>","text":"<p>get the diff url of the two pages (if any)</p> <p>Returns:</p> Name Type Description <code>str</code> <code>Union[str, None]</code> <p>the url of the diff</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>def getDiffUrl(self) -&gt; typing.Union[str, None]:\n    \"\"\"\n    get the diff url of the two pages (if any)\n\n    Returns:\n        str: the url of the diff\n    \"\"\"\n    diff_url = None\n    if self.old_page and self.new_page:\n        oldid = self.old_page.revision\n        newid = self.new_page.revision\n        site = self.new_page.site\n        diff_url = f\"{site.scheme}://{site.host}{site.path}index.php?title={self.new_page.page_title}&amp;type=revision&amp;diff={newid}&amp;oldid={oldid}\"\n        pass\n    return diff_url\n</code></pre>"},{"location":"#yprinciple.ypcell.MwGenResult.page_changed","title":"<code>page_changed()</code>","text":"<p>Check if changes were applied to the new page Returns:     bool: True if the content of the page changed otherwise False</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>def page_changed(self) -&gt; bool:\n    \"\"\"\n    Check if changes were applied to the new page\n    Returns:\n        bool: True if the content of the page changed otherwise False\n    \"\"\"\n    old_revision_id = getattr(self.old_page, \"revision\", None)\n    new_revision_id = getattr(self.new_page, \"revision\", None)\n    return old_revision_id != new_revision_id\n</code></pre>"},{"location":"#yprinciple.ypcell.YpCell","title":"<code>YpCell</code>","text":"<p>a Y-Principle cell</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>class YpCell:\n    \"\"\"\n    a Y-Principle cell\n    \"\"\"\n\n    def __init__(\n        self, modelElement: MetaModelElement, target: Target, debug: bool = False\n    ):\n        \"\"\"\n        constructor\n\n        Args:\n            modelElement (modelElement): the modelElement to generate for\n            target (Target): the target to generate for\n            debug (bool): if True - enable debugging\n        \"\"\"\n        self.modelElement = modelElement\n        self.target = target\n        self.smwAccess = None\n        self.debug = debug\n        self.subCells = {}\n        self.ui_ready = False\n\n    @classmethod\n    def createYpCell(\n        cls, target: Target, topic: \"Topic\", debug: bool = False\n    ) -&gt; \"YpCell\":\n        \"\"\"\n        add a ypCell for the given target and topic\n        \"\"\"\n        ypCell = YpCell(modelElement=topic, target=target, debug=debug)\n        if target.is_multi:\n            target.addSubCells(ypCell=ypCell, topic=topic, debug=debug)\n        return ypCell\n\n    def generateToFile(\n        self, target_dir: str, dryRun: bool = True, withEditor: bool = False\n    ) -&gt; FileGenResult:\n        \"\"\"\n        generate the given cell and store the result to a file in the given target directory\n\n        Args:\n            target_dir (str): path to the target directory\n            dryRun (bool): if True do not push the result\n            withEditor (bool): if True open Editor when in dry Run mode\n\n        Returns:\n            FileGenResult: the generated result\n        \"\"\"\n        # ignore multi targets\n        if self.target.is_multi:\n            return None\n        markup = self.generateMarkup(withEditor=withEditor)\n        path = None\n        if not dryRun:\n            filename = self.target.getFileName(self.modelElement, \"\")\n            path = f\"{target_dir}/{filename}\"\n            if not os.path.isdir(target_dir):\n                os.makedirs(target_dir, exist_ok=True)\n            with open(path, \"w\") as markup_file:\n                markup_file.write(markup)\n            pass\n        genResult = FileGenResult(markup=markup, path=path)\n        return genResult\n\n    def generateMarkup(self, withEditor: bool = False):\n        \"\"\"\n        generate the markup\n\n        Args:\n            withEditor (bool): if True open Editor when in dry Run mode\n\n        Returns:\n            str: the markup\n        \"\"\"\n        markup = self.target.generate(self.modelElement)\n        if withEditor:\n            Editor.open_tmp_text(\n                markup,\n                file_name=self.target.getFileName(\n                    self.modelElement, \"wiki_gen\", fixcolon=True\n                ),\n            )\n        return markup\n\n    def generateViaMwApi(\n        self, smwAccess=None, dryRun: bool = True, withEditor: bool = False\n    ) -&gt; typing.Union[MwGenResult, None]:\n        \"\"\"\n        generate the given cell and upload the result via the given\n        Semantic MediaWiki Access\n\n        Args:\n            smwAccess (SMWAccess): the access to use\n            dryRun (bool): if True do not push the result\n            withEditor (bool): if True open Editor when in dry Run mode\n\n        Returns:\n            MwGenResult:\n            None: if target is multi\n        \"\"\"\n        markup_diff = \"\"\n        # ignore multi targets\n        if self.target.is_multi:\n            return None\n        markup = self.generateMarkup(withEditor=withEditor)\n        old_page = self.getPage(smwAccess)\n        new_page = None\n        if self.pageText:\n            markup_diff = WikiPush.getDiff(self.pageText, markup)\n            if withEditor:\n                Editor.open_tmp_text(\n                    self.pageText,\n                    file_name=self.target.getFileName(self.modelElement, \"wiki_page\"),\n                )\n                Editor.open_tmp_text(\n                    markup_diff,\n                    file_name=self.target.getFileName(self.modelElement, \"wiki_diff\"),\n                )\n        if not dryRun and self.page:\n            self.page.edit(markup, f\"modified by {Version.name} {Version.version}\")\n            # update status\n            # @TODO make diff/status available see https://github.com/WolfgangFahl/py-yprinciple-gen/issues/15\n            new_page = self.getPage(smwAccess)\n        else:\n            markup_diff = markup\n        genResult = MwGenResult(\n            markup=markup, markup_diff=markup_diff, old_page=old_page, new_page=new_page\n        )\n        return genResult\n\n    def getLabelText(self) -&gt; str:\n        \"\"\"\n        get my label Text\n\n        Returns:\n            str: a label in the generator grid for my modelElement\n        \"\"\"\n        return self.target.getLabelText(self.modelElement)\n\n    def getPageTitle(self):\n        \"\"\"\n        get the page title for my modelElement\n        \"\"\"\n        return self.target.getPageTitle(self.modelElement)\n\n    def getPage(self, smwAccess: SMWAccess) -&gt; str:\n        \"\"\"\n        get the pageText and status for the given smwAccess\n\n        Args:\n            smwAccess(SMWAccess): the Semantic Mediawiki access to use\n\n        Returns:\n            str: the wiki markup for this cell (if any)\n        \"\"\"\n        self.smwAccess = smwAccess\n        self.pageUrl = None\n        self.page = None\n        self.pageText = None\n        self.pageTitle = None\n        if self.target.name == \"Python\" or self.target.is_multi:\n            self.status = \"\u24d8\"\n            self.statusMsg = f\"{self.status}\"\n        else:\n            wikiClient = smwAccess.wikiClient\n            self.pageTitle = self.getPageTitle()\n            self.page = wikiClient.getPage(self.pageTitle)\n            baseurl = wikiClient.wikiUser.getWikiUrl()\n            # assumes simple PageTitle without special chars\n            # see https://www.mediawiki.org/wiki/Manual:Page_title for the more comples\n            # rules that could apply\n            self.pageUrl = f\"{baseurl}/index.php/{self.pageTitle}\"\n            if self.page.exists:\n                self.pageText = self.page.text()\n            else:\n                self.pageText = None\n            self.status = f\"\u2705\" if self.pageText else \"\u274c\"\n            self.statusMsg = f\"{len(self.pageText)}\" if self.pageText else \"\"\n        return self.page\n</code></pre>"},{"location":"#yprinciple.ypcell.YpCell.__init__","title":"<code>__init__(modelElement, target, debug=False)</code>","text":"<p>constructor</p> <p>Parameters:</p> Name Type Description Default <code>modelElement</code> <code>modelElement</code> <p>the modelElement to generate for</p> required <code>target</code> <code>Target</code> <p>the target to generate for</p> required <code>debug</code> <code>bool</code> <p>if True - enable debugging</p> <code>False</code> Source code in <code>yprinciple/ypcell.py</code> <pre><code>def __init__(\n    self, modelElement: MetaModelElement, target: Target, debug: bool = False\n):\n    \"\"\"\n    constructor\n\n    Args:\n        modelElement (modelElement): the modelElement to generate for\n        target (Target): the target to generate for\n        debug (bool): if True - enable debugging\n    \"\"\"\n    self.modelElement = modelElement\n    self.target = target\n    self.smwAccess = None\n    self.debug = debug\n    self.subCells = {}\n    self.ui_ready = False\n</code></pre>"},{"location":"#yprinciple.ypcell.YpCell.createYpCell","title":"<code>createYpCell(target, topic, debug=False)</code>  <code>classmethod</code>","text":"<p>add a ypCell for the given target and topic</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>@classmethod\ndef createYpCell(\n    cls, target: Target, topic: \"Topic\", debug: bool = False\n) -&gt; \"YpCell\":\n    \"\"\"\n    add a ypCell for the given target and topic\n    \"\"\"\n    ypCell = YpCell(modelElement=topic, target=target, debug=debug)\n    if target.is_multi:\n        target.addSubCells(ypCell=ypCell, topic=topic, debug=debug)\n    return ypCell\n</code></pre>"},{"location":"#yprinciple.ypcell.YpCell.generateMarkup","title":"<code>generateMarkup(withEditor=False)</code>","text":"<p>generate the markup</p> <p>Parameters:</p> Name Type Description Default <code>withEditor</code> <code>bool</code> <p>if True open Editor when in dry Run mode</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>the markup</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>def generateMarkup(self, withEditor: bool = False):\n    \"\"\"\n    generate the markup\n\n    Args:\n        withEditor (bool): if True open Editor when in dry Run mode\n\n    Returns:\n        str: the markup\n    \"\"\"\n    markup = self.target.generate(self.modelElement)\n    if withEditor:\n        Editor.open_tmp_text(\n            markup,\n            file_name=self.target.getFileName(\n                self.modelElement, \"wiki_gen\", fixcolon=True\n            ),\n        )\n    return markup\n</code></pre>"},{"location":"#yprinciple.ypcell.YpCell.generateToFile","title":"<code>generateToFile(target_dir, dryRun=True, withEditor=False)</code>","text":"<p>generate the given cell and store the result to a file in the given target directory</p> <p>Parameters:</p> Name Type Description Default <code>target_dir</code> <code>str</code> <p>path to the target directory</p> required <code>dryRun</code> <code>bool</code> <p>if True do not push the result</p> <code>True</code> <code>withEditor</code> <code>bool</code> <p>if True open Editor when in dry Run mode</p> <code>False</code> <p>Returns:</p> Name Type Description <code>FileGenResult</code> <code>FileGenResult</code> <p>the generated result</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>def generateToFile(\n    self, target_dir: str, dryRun: bool = True, withEditor: bool = False\n) -&gt; FileGenResult:\n    \"\"\"\n    generate the given cell and store the result to a file in the given target directory\n\n    Args:\n        target_dir (str): path to the target directory\n        dryRun (bool): if True do not push the result\n        withEditor (bool): if True open Editor when in dry Run mode\n\n    Returns:\n        FileGenResult: the generated result\n    \"\"\"\n    # ignore multi targets\n    if self.target.is_multi:\n        return None\n    markup = self.generateMarkup(withEditor=withEditor)\n    path = None\n    if not dryRun:\n        filename = self.target.getFileName(self.modelElement, \"\")\n        path = f\"{target_dir}/{filename}\"\n        if not os.path.isdir(target_dir):\n            os.makedirs(target_dir, exist_ok=True)\n        with open(path, \"w\") as markup_file:\n            markup_file.write(markup)\n        pass\n    genResult = FileGenResult(markup=markup, path=path)\n    return genResult\n</code></pre>"},{"location":"#yprinciple.ypcell.YpCell.generateViaMwApi","title":"<code>generateViaMwApi(smwAccess=None, dryRun=True, withEditor=False)</code>","text":"<p>generate the given cell and upload the result via the given Semantic MediaWiki Access</p> <p>Parameters:</p> Name Type Description Default <code>smwAccess</code> <code>SMWAccess</code> <p>the access to use</p> <code>None</code> <code>dryRun</code> <code>bool</code> <p>if True do not push the result</p> <code>True</code> <code>withEditor</code> <code>bool</code> <p>if True open Editor when in dry Run mode</p> <code>False</code> <p>Returns:</p> Name Type Description <code>MwGenResult</code> <code>Union[MwGenResult, None]</code> <code>None</code> <code>Union[MwGenResult, None]</code> <p>if target is multi</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>def generateViaMwApi(\n    self, smwAccess=None, dryRun: bool = True, withEditor: bool = False\n) -&gt; typing.Union[MwGenResult, None]:\n    \"\"\"\n    generate the given cell and upload the result via the given\n    Semantic MediaWiki Access\n\n    Args:\n        smwAccess (SMWAccess): the access to use\n        dryRun (bool): if True do not push the result\n        withEditor (bool): if True open Editor when in dry Run mode\n\n    Returns:\n        MwGenResult:\n        None: if target is multi\n    \"\"\"\n    markup_diff = \"\"\n    # ignore multi targets\n    if self.target.is_multi:\n        return None\n    markup = self.generateMarkup(withEditor=withEditor)\n    old_page = self.getPage(smwAccess)\n    new_page = None\n    if self.pageText:\n        markup_diff = WikiPush.getDiff(self.pageText, markup)\n        if withEditor:\n            Editor.open_tmp_text(\n                self.pageText,\n                file_name=self.target.getFileName(self.modelElement, \"wiki_page\"),\n            )\n            Editor.open_tmp_text(\n                markup_diff,\n                file_name=self.target.getFileName(self.modelElement, \"wiki_diff\"),\n            )\n    if not dryRun and self.page:\n        self.page.edit(markup, f\"modified by {Version.name} {Version.version}\")\n        # update status\n        # @TODO make diff/status available see https://github.com/WolfgangFahl/py-yprinciple-gen/issues/15\n        new_page = self.getPage(smwAccess)\n    else:\n        markup_diff = markup\n    genResult = MwGenResult(\n        markup=markup, markup_diff=markup_diff, old_page=old_page, new_page=new_page\n    )\n    return genResult\n</code></pre>"},{"location":"#yprinciple.ypcell.YpCell.getLabelText","title":"<code>getLabelText()</code>","text":"<p>get my label Text</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a label in the generator grid for my modelElement</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>def getLabelText(self) -&gt; str:\n    \"\"\"\n    get my label Text\n\n    Returns:\n        str: a label in the generator grid for my modelElement\n    \"\"\"\n    return self.target.getLabelText(self.modelElement)\n</code></pre>"},{"location":"#yprinciple.ypcell.YpCell.getPage","title":"<code>getPage(smwAccess)</code>","text":"<p>get the pageText and status for the given smwAccess</p> <p>Parameters:</p> Name Type Description Default <code>smwAccess(SMWAccess)</code> <p>the Semantic Mediawiki access to use</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the wiki markup for this cell (if any)</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>def getPage(self, smwAccess: SMWAccess) -&gt; str:\n    \"\"\"\n    get the pageText and status for the given smwAccess\n\n    Args:\n        smwAccess(SMWAccess): the Semantic Mediawiki access to use\n\n    Returns:\n        str: the wiki markup for this cell (if any)\n    \"\"\"\n    self.smwAccess = smwAccess\n    self.pageUrl = None\n    self.page = None\n    self.pageText = None\n    self.pageTitle = None\n    if self.target.name == \"Python\" or self.target.is_multi:\n        self.status = \"\u24d8\"\n        self.statusMsg = f\"{self.status}\"\n    else:\n        wikiClient = smwAccess.wikiClient\n        self.pageTitle = self.getPageTitle()\n        self.page = wikiClient.getPage(self.pageTitle)\n        baseurl = wikiClient.wikiUser.getWikiUrl()\n        # assumes simple PageTitle without special chars\n        # see https://www.mediawiki.org/wiki/Manual:Page_title for the more comples\n        # rules that could apply\n        self.pageUrl = f\"{baseurl}/index.php/{self.pageTitle}\"\n        if self.page.exists:\n            self.pageText = self.page.text()\n        else:\n            self.pageText = None\n        self.status = f\"\u2705\" if self.pageText else \"\u274c\"\n        self.statusMsg = f\"{len(self.pageText)}\" if self.pageText else \"\"\n    return self.page\n</code></pre>"},{"location":"#yprinciple.ypcell.YpCell.getPageTitle","title":"<code>getPageTitle()</code>","text":"<p>get the page title for my modelElement</p> Source code in <code>yprinciple/ypcell.py</code> <pre><code>def getPageTitle(self):\n    \"\"\"\n    get the page title for my modelElement\n    \"\"\"\n    return self.target.getPageTitle(self.modelElement)\n</code></pre>"},{"location":"#yprinciple.ypgen","title":"<code>ypgen</code>","text":"<p>Created on 2022-11-24</p> <p>@author: wf</p>"},{"location":"#yprinciple.ypgen.YPGen","title":"<code>YPGen</code>","text":"<p>               Bases: <code>WebserverCmd</code></p> <p>Y-Principle Generator Command Line</p> Source code in <code>yprinciple/ypgen.py</code> <pre><code>class YPGen(WebserverCmd):\n    \"\"\"\n    Y-Principle Generator Command Line\n    \"\"\"\n\n    def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n        \"\"\"\n        Setup command line argument parser\n\n        Args:\n            description (str): the description\n            version_msg (str): the version message\n\n        Returns:\n            ArgumentParser: the argument parser\n        \"\"\"\n        parser = super().getArgParser(description, version_msg)\n        parser.add_argument(\n            \"--context\",\n            default=\"MetaModel\",\n            help=\"context to generate from [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--topics\", nargs=\"*\", help=\"list of topic names\\n[default: %(default)s]\"\n        )\n        parser.add_argument(\n            \"--targets\", nargs=\"*\", help=\"list of target names\\n[default: %(default)s]\"\n        )\n        parser.add_argument(\n            \"-ga\",\n            \"--genViaMwApi\",\n            action=\"store_true\",\n            help=\"generate elements via Api\",\n        )\n        parser.add_argument(\n            \"-gf\", \"--genToFile\", action=\"store_true\", help=\"generate elements to files\"\n        )\n        parser.add_argument(\n            \"--targetPath\",\n            dest=\"targetPath\",\n            help=\"path for the files to be generated - uses wikibackup default path for wikiId if not specified\",\n            required=False,\n        )\n        parser.add_argument(\"--sidif\", help=\"path to SiDIF input file\")\n        parser.add_argument(\n            \"-nd\",\n            \"--noDry\",\n            action=\"store_true\",\n            help=\"switch off dry run [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--editor\",\n            action=\"store_true\",\n            help=\"open editor for results [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--push\",\n            action=\"store_true\",\n            help=\"push from source to target [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--wikiId\",\n            \"--target\",\n            default=\"wiki\",\n            help=\"id of the wiki to generate for [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--source\",\n            default=\"profiwiki\",\n            help=\"id of the wiki to get concept and contexts (schemas) from [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--login\",\n            dest=\"login\",\n            action=\"store_true\",\n            help=\"login to source wiki for access permission\",\n        )\n        parser.add_argument(\n            \"-f\",\n            \"--force\",\n            dest=\"force\",\n            action=\"store_true\",\n            help=\"force to overwrite existing pages\",\n        )\n        parser.add_argument(\"-q\", \"--quiet\", help=\"not verbose [default: %(default)s]\")\n        return parser\n\n    def handle_args(self):\n        \"\"\"\n        work on the arguments\n        \"\"\"\n        handled = super().handle_args()\n        args = self.args\n        if args.genToFile or args.genViaMwApi or args.push:\n            gen = GeneratorAPI.fromArgs(args)\n            if gen.error:\n                print(f\"{gen.errmsg}\", file=sys.stderr)\n                return 3\n            dryRun = not args.noDry\n            if args.genViaMwApi:\n                gen.generateViaMwApi(\n                    target_names=args.targets,\n                    topic_names=args.topics,\n                    dryRun=dryRun,\n                    withEditor=args.editor,\n                )\n            if args.genToFile:\n                gen.generateToFile(\n                    target_dir=args.targetPath,\n                    target_names=args.targets,\n                    topic_names=args.topics,\n                    dryRun=dryRun,\n                    withEditor=args.editor,\n                )\n            if args.push:\n                gen.push()\n            handled = True\n        return handled\n</code></pre>"},{"location":"#yprinciple.ypgen.YPGen.getArgParser","title":"<code>getArgParser(description, version_msg)</code>","text":"<p>Setup command line argument parser</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>the description</p> required <code>version_msg</code> <code>str</code> <p>the version message</p> required <p>Returns:</p> Name Type Description <code>ArgumentParser</code> <code>ArgumentParser</code> <p>the argument parser</p> Source code in <code>yprinciple/ypgen.py</code> <pre><code>def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n    \"\"\"\n    Setup command line argument parser\n\n    Args:\n        description (str): the description\n        version_msg (str): the version message\n\n    Returns:\n        ArgumentParser: the argument parser\n    \"\"\"\n    parser = super().getArgParser(description, version_msg)\n    parser.add_argument(\n        \"--context\",\n        default=\"MetaModel\",\n        help=\"context to generate from [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--topics\", nargs=\"*\", help=\"list of topic names\\n[default: %(default)s]\"\n    )\n    parser.add_argument(\n        \"--targets\", nargs=\"*\", help=\"list of target names\\n[default: %(default)s]\"\n    )\n    parser.add_argument(\n        \"-ga\",\n        \"--genViaMwApi\",\n        action=\"store_true\",\n        help=\"generate elements via Api\",\n    )\n    parser.add_argument(\n        \"-gf\", \"--genToFile\", action=\"store_true\", help=\"generate elements to files\"\n    )\n    parser.add_argument(\n        \"--targetPath\",\n        dest=\"targetPath\",\n        help=\"path for the files to be generated - uses wikibackup default path for wikiId if not specified\",\n        required=False,\n    )\n    parser.add_argument(\"--sidif\", help=\"path to SiDIF input file\")\n    parser.add_argument(\n        \"-nd\",\n        \"--noDry\",\n        action=\"store_true\",\n        help=\"switch off dry run [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--editor\",\n        action=\"store_true\",\n        help=\"open editor for results [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--push\",\n        action=\"store_true\",\n        help=\"push from source to target [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--wikiId\",\n        \"--target\",\n        default=\"wiki\",\n        help=\"id of the wiki to generate for [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--source\",\n        default=\"profiwiki\",\n        help=\"id of the wiki to get concept and contexts (schemas) from [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--login\",\n        dest=\"login\",\n        action=\"store_true\",\n        help=\"login to source wiki for access permission\",\n    )\n    parser.add_argument(\n        \"-f\",\n        \"--force\",\n        dest=\"force\",\n        action=\"store_true\",\n        help=\"force to overwrite existing pages\",\n    )\n    parser.add_argument(\"-q\", \"--quiet\", help=\"not verbose [default: %(default)s]\")\n    return parser\n</code></pre>"},{"location":"#yprinciple.ypgen.YPGen.handle_args","title":"<code>handle_args()</code>","text":"<p>work on the arguments</p> Source code in <code>yprinciple/ypgen.py</code> <pre><code>def handle_args(self):\n    \"\"\"\n    work on the arguments\n    \"\"\"\n    handled = super().handle_args()\n    args = self.args\n    if args.genToFile or args.genViaMwApi or args.push:\n        gen = GeneratorAPI.fromArgs(args)\n        if gen.error:\n            print(f\"{gen.errmsg}\", file=sys.stderr)\n            return 3\n        dryRun = not args.noDry\n        if args.genViaMwApi:\n            gen.generateViaMwApi(\n                target_names=args.targets,\n                topic_names=args.topics,\n                dryRun=dryRun,\n                withEditor=args.editor,\n            )\n        if args.genToFile:\n            gen.generateToFile(\n                target_dir=args.targetPath,\n                target_names=args.targets,\n                topic_names=args.topics,\n                dryRun=dryRun,\n                withEditor=args.editor,\n            )\n        if args.push:\n            gen.push()\n        handled = True\n    return handled\n</code></pre>"},{"location":"#yprinciple.ypgen.main","title":"<code>main(argv=None)</code>","text":"<p>main call</p> Source code in <code>yprinciple/ypgen.py</code> <pre><code>def main(argv: list = None):\n    \"\"\"\n    main call\n    \"\"\"\n    cmd = YPGen(\n        config=YPGenServer.get_config(),\n        webserver_cls=YPGenServer,\n    )\n    exit_code = cmd.cmd_main(argv)\n    return exit_code\n</code></pre>"},{"location":"#yprinciple.ypgenapp","title":"<code>ypgenapp</code>","text":"<p>Created on 2022-11-24</p> <p>@author: wf</p>"},{"location":"#yprinciple.ypgenapp.YPGenApp","title":"<code>YPGenApp</code>","text":"<p>               Bases: <code>InputWebSolution</code></p> <p>Y-Principle Generator Web Application / Solution</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>class YPGenApp(InputWebSolution):\n    \"\"\"\n    Y-Principle Generator Web Application / Solution\n    \"\"\"\n\n    def __init__(self, webserver: YPGenServer, client: Client):\n        \"\"\"\n        Initializes the InputWebSolution instance with the webserver and client.\n\n        Args:\n            webserver (NiceGuiWebserver): The webserver instance this solution is part of.\n            client (Client): The client interacting with this solution.\n        \"\"\"\n        super().__init__(webserver, client)\n\n    def clearErrors(self):\n        \"\"\"\n        clear log entries\n        \"\"\"\n        self.log_view.clear()\n\n    def prepare_ui(self):\n        \"\"\"\n        prepare the user interface\n        \"\"\"\n        super().prepare_ui()\n        args = self.args\n        profile = Profiler(\"prepare_ui\", profile=args.debug)\n        self.wikiUsers = self.webserver.wikiUsers\n        # see https://wiki.bitplan.com/index.php/Y-Prinzip#Example\n        smw_profile = Profiler(\"get SMW targets\", profile=args.debug)\n        self.targets = SMWTarget.getSMWTargets()\n        smw_profile.time()\n        self.wikiId = args.wikiId\n        self.context_name = args.context\n\n        self.wikiLink = None\n        self.mw_context = None\n        self.mw_contexts = {}\n        self.contextLink = None\n\n        # states\n        self.useSidif = True\n        self.dryRun = True\n        self.openEditor = False\n        self.explainDepth = 0\n        profile.time()\n\n    def setWikiLink(self, url, text, tooltip):\n        if self.wikiLink is not None:\n            link = Link.create(url, text, tooltip)\n            self.wikiLink.content = link\n\n    def setGenApiFromArgs(self, args=None):\n        \"\"\"\n        set the semantic MediaWiki\n        \"\"\"\n        if args is None:\n            args = self.args\n        with self.content_div:\n            ui.notify(\"preparing Generator\")\n        self.setGeneratorEnvironmentFromArgs(args)\n\n    def setGeneratorEnvironmentFromArgs(self, args):\n        \"\"\"\n        set my generator environment from the given command line arguments\n        \"\"\"\n        gen_profile = Profiler(\"prepare gen API and mwcontext\", profile=self.args.debug)\n        self.genapi = GeneratorAPI.fromArgs(args)\n        self.genapi.setWikiAndGetContexts(args)\n        self.smwAccess = self.genapi.smwAccess\n        wikiUser = self.smwAccess.wikiClient.wikiUser\n        if wikiUser:\n            self.setWikiLink(wikiUser.getWikiUrl(), args.wikiId, args.wikiId)\n        self.setMWContext()\n        gen_profile.time()\n\n    def setMWContext(self):\n        \"\"\"\n        set my context\n        \"\"\"\n        self.mw_contexts = self.genapi.mw_contexts\n        mw_context = self.mw_contexts.get(self.context_name, None)\n        self.setContext(mw_context)\n\n    def setContext(self, mw_context):\n        \"\"\"\n        set the Context\n        \"\"\"\n        self.mw_context = mw_context\n        if self.contextLink is not None:\n            if mw_context is not None:\n                self.contextLink.title = (\n                    f\"{mw_context.context}({mw_context.since} at {mw_context.master}\"\n                )\n                self.contextLink.text = f\"{mw_context.wikiId}:{mw_context.context}\"\n                self.contextLink.href = mw_context.sidif_url()\n            else:\n                self.contextLink.title = \"?\"\n                self.contextLink.text = \"?\"\n                self.contextLink.href = (\n                    \"https://wiki.bitplan.com/index.php/Concept:Context\"\n                )\n\n    async def async_showGenerateGrid(self):\n        \"\"\"\n        run setup in background\n        \"\"\"\n        await run.io_bound(self.show_GenerateGrid)\n\n    def show_GenerateGrid(self):\n        \"\"\"\n        show the grid for generating code\n        \"\"\"\n        try:\n            self.grid_container.clear()\n            with self.grid_container:\n                # start with a new generatorGrid\n                self.generatorGrid = GeneratorGrid(\n                    self.targets, parent=self.grid_container, solution=self\n                )\n            if self.useSidif:\n                if self.mw_context is not None:\n                    context, error, errMsg = Context.fromWikiContext(\n                        self.mw_context, debug=self.args.debug, depth=self.explainDepth\n                    )\n                    if error is not None:\n                        self.log_view.push(errMsg)\n                    else:\n                        self.generatorGrid.add_topic_rows(context)\n        except Exception as ex:\n            self.handle_exception(ex)\n\n    async def onChangeLanguage(self, msg):\n        \"\"\"\n        react on language being changed via Select control\n        \"\"\"\n        self.language = msg.value\n\n    async def onChangeWiki(self, e):\n        \"\"\"\n        react on a the wiki being changed\n        via a Select control\n        \"\"\"\n        try:\n            wikiId = e.value\n            self.clearErrors()\n            # change wikiUser\n            self.args.wikiId = wikiId\n            await run.io_bound(self.setGeneratorEnvironmentFromArgs, self.args)\n            await self.update_context_select()\n        except BaseException as ex:\n            self.handle_exception(ex)\n\n    async def onChangeContext(self, msg):\n        \"\"\"\n        react on the context\n        being changed via a Select control\n        \"\"\"\n        try:\n            self.clearErrors()\n            self.context_name = msg.value\n            self.mw_context = self.mw_contexts.get(self.context_name, None)\n            self.setContext(self.mw_context)\n            self.update_context_link()\n            await self.async_showGenerateGrid()\n        except BaseException as ex:\n            self.handle_exception(ex)\n\n    def addLanguageSelect(self):\n        \"\"\"\n        add a language selector\n        \"\"\"\n        self.languageSelect = self.createSelect(\n            \"Language\", \"en\", a=self.colB1, change=self.onChangeLanguage\n        )\n        for language in self.getLanguages():\n            lang = language[0]\n            desc = language[1]\n            desc = html.unescape(desc)\n            self.languageSelect.add(self.jp.Option(value=lang, text=desc))\n\n    def addWikiSelect(self):\n        \"\"\"\n        add a wiki selector\n        \"\"\"\n        if len(self.wikiUsers) &gt; 0:\n            self.wiki_select = self.add_select(\n                title=\"wikiId\",\n                selection=sorted(self.wikiUsers),\n                value=self.wikiId,\n                on_change=self.onChangeWiki,\n            )\n            if self.mw_context is not None:\n                self.wikiLink = ui.html()\n                url = self.mw_context.wiki_url\n                self.setWikiLink(url=url, text=self.wikiId, tooltip=self.wikiId)\n\n    def onExplainDepthChange(self, msg):\n        self.explainDepth = int(msg.value)\n\n    def addExplainDepthSelect(self):\n        self.explainDepthSelect = self.createSelect(\n            \"explain depth\", value=0, change=self.onExplainDepthChange, a=self.colB1\n        )\n        for depth in range(17):\n            self.explainDepthSelect.add(self.jp.Option(value=depth, text=str(depth)))\n\n    def handleHideShowSizeInfo(self, msg):\n        \"\"\"\n        handles switching visibility of size information\n        \"\"\"\n        show_size = msg.sender.value\n        self.generatorGrid.set_hide_show_status_of_cell_debug_msg(hidden=not show_size)\n\n    def add_context_select(self):\n        \"\"\"\n        add a selection of possible contexts for the given wiki\n        \"\"\"\n        try:\n            selection = list(self.mw_contexts.keys())\n            self.context_select = self.add_select(\n                \"Context\",\n                selection=selection,\n                value=self.context_name,\n                on_change=self.onChangeContext,\n            )\n            self.context_link = ui.html()\n            self.update_context_link()\n        except BaseException as ex:\n            self.handle_exception(ex)\n\n    def update_context_link(self):\n        \"\"\"\n        update the context link\n        \"\"\"\n        if self.mw_context is not None:\n            url = self.mw_context.sidif_url()\n            link = Link.create(url, text=self.context_name)\n            self.context_link.content = link\n        else:\n            self.context_link.content = \"?\"\n\n        self.context_link.update()\n        pass\n\n    async def update_context_select(self):\n        \"\"\"\n        react on update of context select\n        \"\"\"\n        self.update_context_link()\n        context_selection = list(self.mw_contexts.keys())\n        self.context_select.options = context_selection\n        if self.context_name in context_selection:\n            self.context_select.value = self.context_name\n        self.context_select.update()\n        self.grid_container.clear()\n        pass\n\n    def configure_settings(self):\n        \"\"\"\n        override settings\n        \"\"\"\n        self.addLanguageSelect()\n        self.addWikiSelect()\n        self.addExplainDepthSelect()\n\n    async def show_all(self):\n        \"\"\"\n        show settings and generator grid\n        \"\"\"\n        with self.content_div:\n            self.content_div.clear()\n            with ui.card() as self.settings_area:\n                with ui.grid(columns=2):\n                    self.addWikiSelect()\n                    self.add_context_select()\n            with ui.row() as self.button_bar:\n                self.tool_button(\n                    tooltip=\"reload\",\n                    icon=\"refresh\",\n                    handler=self.async_showGenerateGrid,\n                )\n                self.useSidifButton = ui.switch(\"use SiDIF\").bind_value(\n                    self, \"useSidif\"\n                )\n                self.dryRunButton = ui.switch(\"dry Run\").bind_value(self, \"dryRun\")\n                self.openEditorButton = ui.switch(\"open Editor\").bind_value(\n                    self, \"openEditor\"\n                )\n                self.hideShowSizeInfo = ui.switch(\"size info\").on(\n                    \"click\", self.handleHideShowSizeInfo\n                )\n            with ui.row() as self.progress_container:\n                self.progressBar = NiceguiProgressbar(\n                    total=100, desc=\"preparing\", unit=\"steps\"\n                )\n            with ui.row() as self.grid_container:\n                pass\n\n    async def load_home_page(self):\n        \"\"\"\n        back ground preparation\n        \"\"\"\n        with self.content_div:\n            # show a spinner while loading\n            ui.spinner()\n        await run.io_bound(self.setGenApiFromArgs)\n        self.content_div.clear()\n        await self.show_all()\n\n    async def home(self):\n        \"\"\"\n        provide the main content / home page\n\n        home page\n        \"\"\"\n\n        def show():\n            \"\"\"\n            show the ui\n            \"\"\"\n            try:\n                # run view\n                background_tasks.create(self.load_home_page())\n            except Exception as ex:\n                self.handle_exception(ex)\n\n        await self.setup_content_div(show)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.__init__","title":"<code>__init__(webserver, client)</code>","text":"<p>Initializes the InputWebSolution instance with the webserver and client.</p> <p>Parameters:</p> Name Type Description Default <code>webserver</code> <code>NiceGuiWebserver</code> <p>The webserver instance this solution is part of.</p> required <code>client</code> <code>Client</code> <p>The client interacting with this solution.</p> required Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def __init__(self, webserver: YPGenServer, client: Client):\n    \"\"\"\n    Initializes the InputWebSolution instance with the webserver and client.\n\n    Args:\n        webserver (NiceGuiWebserver): The webserver instance this solution is part of.\n        client (Client): The client interacting with this solution.\n    \"\"\"\n    super().__init__(webserver, client)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.addLanguageSelect","title":"<code>addLanguageSelect()</code>","text":"<p>add a language selector</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def addLanguageSelect(self):\n    \"\"\"\n    add a language selector\n    \"\"\"\n    self.languageSelect = self.createSelect(\n        \"Language\", \"en\", a=self.colB1, change=self.onChangeLanguage\n    )\n    for language in self.getLanguages():\n        lang = language[0]\n        desc = language[1]\n        desc = html.unescape(desc)\n        self.languageSelect.add(self.jp.Option(value=lang, text=desc))\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.addWikiSelect","title":"<code>addWikiSelect()</code>","text":"<p>add a wiki selector</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def addWikiSelect(self):\n    \"\"\"\n    add a wiki selector\n    \"\"\"\n    if len(self.wikiUsers) &gt; 0:\n        self.wiki_select = self.add_select(\n            title=\"wikiId\",\n            selection=sorted(self.wikiUsers),\n            value=self.wikiId,\n            on_change=self.onChangeWiki,\n        )\n        if self.mw_context is not None:\n            self.wikiLink = ui.html()\n            url = self.mw_context.wiki_url\n            self.setWikiLink(url=url, text=self.wikiId, tooltip=self.wikiId)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.add_context_select","title":"<code>add_context_select()</code>","text":"<p>add a selection of possible contexts for the given wiki</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def add_context_select(self):\n    \"\"\"\n    add a selection of possible contexts for the given wiki\n    \"\"\"\n    try:\n        selection = list(self.mw_contexts.keys())\n        self.context_select = self.add_select(\n            \"Context\",\n            selection=selection,\n            value=self.context_name,\n            on_change=self.onChangeContext,\n        )\n        self.context_link = ui.html()\n        self.update_context_link()\n    except BaseException as ex:\n        self.handle_exception(ex)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.async_showGenerateGrid","title":"<code>async_showGenerateGrid()</code>  <code>async</code>","text":"<p>run setup in background</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>async def async_showGenerateGrid(self):\n    \"\"\"\n    run setup in background\n    \"\"\"\n    await run.io_bound(self.show_GenerateGrid)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.clearErrors","title":"<code>clearErrors()</code>","text":"<p>clear log entries</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def clearErrors(self):\n    \"\"\"\n    clear log entries\n    \"\"\"\n    self.log_view.clear()\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.configure_settings","title":"<code>configure_settings()</code>","text":"<p>override settings</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def configure_settings(self):\n    \"\"\"\n    override settings\n    \"\"\"\n    self.addLanguageSelect()\n    self.addWikiSelect()\n    self.addExplainDepthSelect()\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.handleHideShowSizeInfo","title":"<code>handleHideShowSizeInfo(msg)</code>","text":"<p>handles switching visibility of size information</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def handleHideShowSizeInfo(self, msg):\n    \"\"\"\n    handles switching visibility of size information\n    \"\"\"\n    show_size = msg.sender.value\n    self.generatorGrid.set_hide_show_status_of_cell_debug_msg(hidden=not show_size)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.home","title":"<code>home()</code>  <code>async</code>","text":"<p>provide the main content / home page</p> <p>home page</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>async def home(self):\n    \"\"\"\n    provide the main content / home page\n\n    home page\n    \"\"\"\n\n    def show():\n        \"\"\"\n        show the ui\n        \"\"\"\n        try:\n            # run view\n            background_tasks.create(self.load_home_page())\n        except Exception as ex:\n            self.handle_exception(ex)\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.load_home_page","title":"<code>load_home_page()</code>  <code>async</code>","text":"<p>back ground preparation</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>async def load_home_page(self):\n    \"\"\"\n    back ground preparation\n    \"\"\"\n    with self.content_div:\n        # show a spinner while loading\n        ui.spinner()\n    await run.io_bound(self.setGenApiFromArgs)\n    self.content_div.clear()\n    await self.show_all()\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.onChangeContext","title":"<code>onChangeContext(msg)</code>  <code>async</code>","text":"<p>react on the context being changed via a Select control</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>async def onChangeContext(self, msg):\n    \"\"\"\n    react on the context\n    being changed via a Select control\n    \"\"\"\n    try:\n        self.clearErrors()\n        self.context_name = msg.value\n        self.mw_context = self.mw_contexts.get(self.context_name, None)\n        self.setContext(self.mw_context)\n        self.update_context_link()\n        await self.async_showGenerateGrid()\n    except BaseException as ex:\n        self.handle_exception(ex)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.onChangeLanguage","title":"<code>onChangeLanguage(msg)</code>  <code>async</code>","text":"<p>react on language being changed via Select control</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>async def onChangeLanguage(self, msg):\n    \"\"\"\n    react on language being changed via Select control\n    \"\"\"\n    self.language = msg.value\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.onChangeWiki","title":"<code>onChangeWiki(e)</code>  <code>async</code>","text":"<p>react on a the wiki being changed via a Select control</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>async def onChangeWiki(self, e):\n    \"\"\"\n    react on a the wiki being changed\n    via a Select control\n    \"\"\"\n    try:\n        wikiId = e.value\n        self.clearErrors()\n        # change wikiUser\n        self.args.wikiId = wikiId\n        await run.io_bound(self.setGeneratorEnvironmentFromArgs, self.args)\n        await self.update_context_select()\n    except BaseException as ex:\n        self.handle_exception(ex)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.prepare_ui","title":"<code>prepare_ui()</code>","text":"<p>prepare the user interface</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def prepare_ui(self):\n    \"\"\"\n    prepare the user interface\n    \"\"\"\n    super().prepare_ui()\n    args = self.args\n    profile = Profiler(\"prepare_ui\", profile=args.debug)\n    self.wikiUsers = self.webserver.wikiUsers\n    # see https://wiki.bitplan.com/index.php/Y-Prinzip#Example\n    smw_profile = Profiler(\"get SMW targets\", profile=args.debug)\n    self.targets = SMWTarget.getSMWTargets()\n    smw_profile.time()\n    self.wikiId = args.wikiId\n    self.context_name = args.context\n\n    self.wikiLink = None\n    self.mw_context = None\n    self.mw_contexts = {}\n    self.contextLink = None\n\n    # states\n    self.useSidif = True\n    self.dryRun = True\n    self.openEditor = False\n    self.explainDepth = 0\n    profile.time()\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.setContext","title":"<code>setContext(mw_context)</code>","text":"<p>set the Context</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def setContext(self, mw_context):\n    \"\"\"\n    set the Context\n    \"\"\"\n    self.mw_context = mw_context\n    if self.contextLink is not None:\n        if mw_context is not None:\n            self.contextLink.title = (\n                f\"{mw_context.context}({mw_context.since} at {mw_context.master}\"\n            )\n            self.contextLink.text = f\"{mw_context.wikiId}:{mw_context.context}\"\n            self.contextLink.href = mw_context.sidif_url()\n        else:\n            self.contextLink.title = \"?\"\n            self.contextLink.text = \"?\"\n            self.contextLink.href = (\n                \"https://wiki.bitplan.com/index.php/Concept:Context\"\n            )\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.setGenApiFromArgs","title":"<code>setGenApiFromArgs(args=None)</code>","text":"<p>set the semantic MediaWiki</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def setGenApiFromArgs(self, args=None):\n    \"\"\"\n    set the semantic MediaWiki\n    \"\"\"\n    if args is None:\n        args = self.args\n    with self.content_div:\n        ui.notify(\"preparing Generator\")\n    self.setGeneratorEnvironmentFromArgs(args)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.setGeneratorEnvironmentFromArgs","title":"<code>setGeneratorEnvironmentFromArgs(args)</code>","text":"<p>set my generator environment from the given command line arguments</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def setGeneratorEnvironmentFromArgs(self, args):\n    \"\"\"\n    set my generator environment from the given command line arguments\n    \"\"\"\n    gen_profile = Profiler(\"prepare gen API and mwcontext\", profile=self.args.debug)\n    self.genapi = GeneratorAPI.fromArgs(args)\n    self.genapi.setWikiAndGetContexts(args)\n    self.smwAccess = self.genapi.smwAccess\n    wikiUser = self.smwAccess.wikiClient.wikiUser\n    if wikiUser:\n        self.setWikiLink(wikiUser.getWikiUrl(), args.wikiId, args.wikiId)\n    self.setMWContext()\n    gen_profile.time()\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.setMWContext","title":"<code>setMWContext()</code>","text":"<p>set my context</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def setMWContext(self):\n    \"\"\"\n    set my context\n    \"\"\"\n    self.mw_contexts = self.genapi.mw_contexts\n    mw_context = self.mw_contexts.get(self.context_name, None)\n    self.setContext(mw_context)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.show_GenerateGrid","title":"<code>show_GenerateGrid()</code>","text":"<p>show the grid for generating code</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def show_GenerateGrid(self):\n    \"\"\"\n    show the grid for generating code\n    \"\"\"\n    try:\n        self.grid_container.clear()\n        with self.grid_container:\n            # start with a new generatorGrid\n            self.generatorGrid = GeneratorGrid(\n                self.targets, parent=self.grid_container, solution=self\n            )\n        if self.useSidif:\n            if self.mw_context is not None:\n                context, error, errMsg = Context.fromWikiContext(\n                    self.mw_context, debug=self.args.debug, depth=self.explainDepth\n                )\n                if error is not None:\n                    self.log_view.push(errMsg)\n                else:\n                    self.generatorGrid.add_topic_rows(context)\n    except Exception as ex:\n        self.handle_exception(ex)\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.show_all","title":"<code>show_all()</code>  <code>async</code>","text":"<p>show settings and generator grid</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>async def show_all(self):\n    \"\"\"\n    show settings and generator grid\n    \"\"\"\n    with self.content_div:\n        self.content_div.clear()\n        with ui.card() as self.settings_area:\n            with ui.grid(columns=2):\n                self.addWikiSelect()\n                self.add_context_select()\n        with ui.row() as self.button_bar:\n            self.tool_button(\n                tooltip=\"reload\",\n                icon=\"refresh\",\n                handler=self.async_showGenerateGrid,\n            )\n            self.useSidifButton = ui.switch(\"use SiDIF\").bind_value(\n                self, \"useSidif\"\n            )\n            self.dryRunButton = ui.switch(\"dry Run\").bind_value(self, \"dryRun\")\n            self.openEditorButton = ui.switch(\"open Editor\").bind_value(\n                self, \"openEditor\"\n            )\n            self.hideShowSizeInfo = ui.switch(\"size info\").on(\n                \"click\", self.handleHideShowSizeInfo\n            )\n        with ui.row() as self.progress_container:\n            self.progressBar = NiceguiProgressbar(\n                total=100, desc=\"preparing\", unit=\"steps\"\n            )\n        with ui.row() as self.grid_container:\n            pass\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.update_context_link","title":"<code>update_context_link()</code>","text":"<p>update the context link</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def update_context_link(self):\n    \"\"\"\n    update the context link\n    \"\"\"\n    if self.mw_context is not None:\n        url = self.mw_context.sidif_url()\n        link = Link.create(url, text=self.context_name)\n        self.context_link.content = link\n    else:\n        self.context_link.content = \"?\"\n\n    self.context_link.update()\n    pass\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenApp.update_context_select","title":"<code>update_context_select()</code>  <code>async</code>","text":"<p>react on update of context select</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>async def update_context_select(self):\n    \"\"\"\n    react on update of context select\n    \"\"\"\n    self.update_context_link()\n    context_selection = list(self.mw_contexts.keys())\n    self.context_select.options = context_selection\n    if self.context_name in context_selection:\n        self.context_select.value = self.context_name\n    self.context_select.update()\n    self.grid_container.clear()\n    pass\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenServer","title":"<code>YPGenServer</code>","text":"<p>               Bases: <code>InputWebserver</code></p> <p>Y-Principle Generator webserver</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>class YPGenServer(InputWebserver):\n    \"\"\"\n    Y-Principle Generator webserver\n    \"\"\"\n\n    @classmethod\n    def get_config(cls) -&gt; WebserverConfig:\n        \"\"\"\n        get the configuration for this Webserver\n        \"\"\"\n        copy_right = \"\"\n        config = WebserverConfig(\n            short_name=\"ypgen\",\n            copy_right=copy_right,\n            version=Version(),\n            default_port=8778,\n            timeout=7.5,\n        )\n        server_config = WebserverConfig.get(config)\n        server_config.solution_class = YPGenApp\n        return server_config\n\n    def __init__(self):\n        \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n        InputWebserver.__init__(self, config=YPGenServer.get_config())\n\n    def configure_run(self):\n        \"\"\" \"\"\"\n        InputWebserver.configure_run(self)\n        # wiki users\n        self.wikiUsers = WikiUser.getWikiUsers()\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenServer.__init__","title":"<code>__init__()</code>","text":"<p>Constructs all the necessary attributes for the WebServer object.</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def __init__(self):\n    \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n    InputWebserver.__init__(self, config=YPGenServer.get_config())\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenServer.configure_run","title":"<code>configure_run()</code>","text":"Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>def configure_run(self):\n    \"\"\" \"\"\"\n    InputWebserver.configure_run(self)\n    # wiki users\n    self.wikiUsers = WikiUser.getWikiUsers()\n</code></pre>"},{"location":"#yprinciple.ypgenapp.YPGenServer.get_config","title":"<code>get_config()</code>  <code>classmethod</code>","text":"<p>get the configuration for this Webserver</p> Source code in <code>yprinciple/ypgenapp.py</code> <pre><code>@classmethod\ndef get_config(cls) -&gt; WebserverConfig:\n    \"\"\"\n    get the configuration for this Webserver\n    \"\"\"\n    copy_right = \"\"\n    config = WebserverConfig(\n        short_name=\"ypgen\",\n        copy_right=copy_right,\n        version=Version(),\n        default_port=8778,\n        timeout=7.5,\n    )\n    server_config = WebserverConfig.get(config)\n    server_config.solution_class = YPGenApp\n    return server_config\n</code></pre>"}]}